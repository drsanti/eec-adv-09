"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}Object.defineProperty(exports,"__esModule",{value:!0});var THREE=require("three"),CANNON=require("cannon"),GLTFLoader=_interopDefault(require("three-gltf-loader")),OrbitControls=_interopDefault(require("threejs-orbit-controls")),threeCss2drender=require("three-css2drender"),Options={engine:{},physics:{enabled:!0,timeStep:1/60,subSteps:1,debug:{enabled:!1,color:3377203,offset:.01},solver:{iterations:5,tolerance:1e-6,split:!0},world:{allowSleep:!1,quatNormalizeFast:!0,quatNormalizeSkip:0,gravity:new CANNON.Vec3(0,-10,0),defaultContactMaterial:{contactEquationRelaxation:2,contactEquationStiffness:5e4},broadphase:{useBoundingBoxes:!0}}},graphics:{sceneType:"env",useReflection:!0,fog:{color:16772812,near:1,far:100,plane:{enabled:!0,width:1500,height:1500,color:3359795,receiveShadow:!1}},env:{path:"./images/park"},bkg:{color:1052688,plane:{enabled:!1,width:1500,height:1500,color:1053968,receiveShadow:!1}},models:["./models/scene001.gltf"],camera:{fov:45,near:.1,far:1e3,aspect:window.innerWidth/window.innerHeight,position:{x:-15,y:3,z:-15},lookAt:{x:0,y:0,z:0}},renderer:{antialias:!1,alpha:!1,gammaInput:!0,gammaOutput:!0,shadowMap:{enabled:!0,soft:!0,type:THREE.PCFSoftShadowMap}},controls:{enabled:!0,enablePan:!0,enableZoom:!0,enableRotate:!0,enableDamping:!1,enableKeys:!1},directionalLight:{enabled:!1,color:16777215,intensity:2.5,castShadow:!0,position:{x:10,y:30,z:10},shadow:{bias:.001,mapSize:{width:1024,height:1024},camera:{visible:!0,near:-55,far:55,top:55,bottom:-55,right:55,left:-55}},helper:{enabled:!1,size:2}},spotLight:{enabled:!0,color:16777215,intensity:5.5,castShadow:!0,distance:100,decay:1,angle:Math.PI/4,penumbra:.8,position:{x:45,y:40,z:-10},shadow:{bias:.01,mapSize:{width:1024,height:1024},camera:{visible:!1,fov:90,near:.5,far:500}},helper:{enabled:!1}},pointLight:{enabled:!1,color:16777215,intensity:2,castShadow:!0,distance:50,decay:2,position:{x:3,y:20,z:-5},shadow:{bias:.01,mapSize:{width:1024,height:1024},camera:{visible:!0,fov:90,near:.5,far:1e3}},helper:{enabled:!1,size:1,color:13421772}},ambientLight:{enabled:!0,color:16777215,intensity:.5},grids:{enabled:!1,size:40,divisions:40,colorCenterLine:5605410,colorGrid:8978312,opacity:.5,position:{x:0,y:.01,z:0}},axes:{enabled:!1,size:4,position:{x:0,y:.02,z:0}},stats:{enabled:!0,type:0,left:3,top:3}}},Stats=function(){var mode=0,container=document.createElement("div");function addPanel(panel){return container.appendChild(panel.dom),panel}function showPanel(id){for(var i=0;i<container.children.length;i++)container.children[i].style.display=i===id?"block":"none";mode=id}container.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",container.addEventListener("click",function(event){event.preventDefault(),showPanel(++mode%container.children.length)},!1);var beginTime=(performance||Date).now(),prevTime=beginTime,frames=0,fpsPanel=addPanel(new Stats.Panel("FPS","#0af","#001")),msPanel=addPanel(new Stats.Panel("MS","#0f0","#121"));if(self.performance&&self.performance.memory)var memPanel=addPanel(new Stats.Panel("MB","#f0f","#212"));return showPanel(0),{REVISION:16,dom:container,addPanel:addPanel,showPanel:showPanel,begin:function(){beginTime=(performance||Date).now()},end:function(){frames++;var time=(performance||Date).now();if(msPanel.update(time-beginTime,200),time>=prevTime+1e3&&(fpsPanel.update(1e3*frames/(time-prevTime),100),prevTime=time,frames=0,memPanel)){var memory=performance.memory;memPanel.update(memory.usedJSHeapSize/1048576,memory.jsHeapSizeLimit/1048576)}return time},update:function(){beginTime=this.end()},domElement:container,setMode:showPanel}};function Utils(){}function Graphics(options){this.options=options||{},this.reqAnim=void 0,this.cameras=[],this.renderers=[],this.scenes=[],this.controls=[],this.stats=[],this.ambientLights=[],this.pointLights=[],this.spotLights=[],this.directionalLights=[],this.scene=void 0,this.camera=void 0,this.renderer=void 0,this.control=void 0,this.fogPlane=void 0,this.envMap=void 0}Stats.Panel=function(name,fg,bg){var min=1/0,max=0,round=Math.round,PR=round(window.devicePixelRatio||1),WIDTH=80*PR,HEIGHT=48*PR,TEXT_X=3*PR,TEXT_Y=2*PR,GRAPH_X=3*PR,GRAPH_Y=15*PR,GRAPH_WIDTH=74*PR,GRAPH_HEIGHT=30*PR,canvas=document.createElement("canvas");canvas.width=WIDTH,canvas.height=HEIGHT,canvas.style.cssText="width:80px;height:48px";var context=canvas.getContext("2d");return context.font="bold "+9*PR+"px Helvetica,Arial,sans-serif",context.textBaseline="top",context.fillStyle=bg,context.fillRect(0,0,WIDTH,HEIGHT),context.fillStyle=fg,context.fillText(name,TEXT_X,TEXT_Y),context.fillRect(GRAPH_X,GRAPH_Y,GRAPH_WIDTH,GRAPH_HEIGHT),context.fillStyle=bg,context.globalAlpha=.9,context.fillRect(GRAPH_X,GRAPH_Y,GRAPH_WIDTH,GRAPH_HEIGHT),{dom:canvas,update:function(value,maxValue){min=Math.min(min,value),max=Math.max(max,value),context.fillStyle=bg,context.globalAlpha=1,context.fillRect(0,0,WIDTH,GRAPH_Y),context.fillStyle=fg,context.fillText(round(value)+" "+name+" ("+round(min)+"-"+round(max)+")",TEXT_X,TEXT_Y),context.drawImage(canvas,GRAPH_X+PR,GRAPH_Y,GRAPH_WIDTH-PR,GRAPH_HEIGHT,GRAPH_X,GRAPH_Y,GRAPH_WIDTH-PR,GRAPH_HEIGHT),context.fillRect(GRAPH_X+GRAPH_WIDTH-PR,GRAPH_Y,PR,GRAPH_HEIGHT),context.fillStyle=bg,context.globalAlpha=.9,context.fillRect(GRAPH_X+GRAPH_WIDTH-PR,GRAPH_Y,PR,round((1-value/maxValue)*GRAPH_HEIGHT))}}},Utils.VERSION="Utils version 0.0.1",Utils.COLOR={},Utils.COLOR.NORMAL=3355443,Utils.COLOR.PRIMARY=22015,Utils.COLOR.SECONDARY=7829401,Utils.COLOR.INFO=3368703,Utils.COLOR.SUCCESS=3399031,Utils.COLOR.WARNING=16742195,Utils.COLOR.DANGER=16716049,Utils.CAMERA={},Utils.CAMERA.PREFIX="_camera_",Utils.RENDERER={},Utils.RENDERER.PREFIX="_renderer_",Utils.SCENE={},Utils.SCENE.PREFIX="_scene_",Utils.LIGHT={},Utils.LIGHT.PREFIX="_light_",Utils.AMBIENTLIGHT={},Utils.AMBIENTLIGHT.PREFIX="_AmbientLight_",Utils.POINTLIGHT={},Utils.POINTLIGHT.PREFIX="_PointLight_",Utils.SPOTLIGHT={},Utils.SPOTLIGHT.PREFIX="_SpotLight_",Utils.DIRECTIONALLIGHT={},Utils.DIRECTIONALLIGHT.PREFIX="_DirectionalLight_",Utils.GRIDS={},Utils.GRIDS.PREFIX="_grids_",Utils.AXES={},Utils.AXES.PREFIX="_axes_",Utils.HELPER={},Utils.HELPER.PREFIX="_helper_",Utils.CONTROL={},Utils.CONTROL.PREFIX="_control_",Utils.FOGPLANE={},Utils.FOGPLANE.PREFIX="_fogplane_",Utils.CUBETEXTURE={},Utils.CUBETEXTURE.PREFIX="_cubetexture_",Utils.BODYDEBUG={},Utils.BODYDEBUG.PREFIX="_bodydebug_",Utils.COLLIDER={},Utils.COLLIDER.PREFIX="_collider_",Utils.STATIC={},Utils.STATIC.PREFIX="_static_",Utils.DYNAMIC={},Utils.DYNAMIC.PREFIX="_dynamic_",Utils.MESHLABEL={},Utils.MESHLABEL.PREFIX="_meshlabel_",Utils.PHYGROUNDMAT={},Utils.PHYGROUNDMAT.PREFIX="_physicsgroudmat_",Utils.PHYOBJECTMAT={},Utils.PHYOBJECTMAT.PREFIX="_physicsobjectmat_",Utils.hexToCss=function(hex){return"rgb("+(hex>>16)%256+","+(hex>>8)%256+","+(hex>>0)%256+")"},Utils.print=function(message,color,prefix){console.log("%c"+(prefix?prefix+": ":"")+message,"color:"+Utils.hexToCss(color))},Utils.printInfo=function(message){Utils.print(message,Utils.COLOR.INFO)},Utils.printWarning=function(message){Utils.print(message,Utils.COLOR.WARNING)},Utils.printDanger=function(message){Utils.print(message,Utils.COLOR.DANGER)},Utils.printSuccess=function(message){Utils.print(message,Utils.COLOR.SUCCESS)},Utils.printPrimary=function(message){Utils.print(message,Utils.COLOR.PRIMARY)},Utils.printSecondary=function(message){Utils.print(message,Utils.COLOR.SECONDARY)},Utils.generateId=function(prefix){return(prefix?prefix+"_":"")+Math.floor(1e6*Math.random())},Utils.zerosPad=function(value,length){var str=value+"";const nz=length-str.length;for(var i=0;i<nz;i++)str="0"+str;return str},Utils.opts=function(opt,def){return null==opt?def:opt},Utils.getName=function(obj){return("string"==typeof obj?obj:obj.name).toLowerCase()},Utils.isDebugger=function(obj){return Utils.getName(obj).includes(Utils.BODYDEBUG.PREFIX)},Utils.isHelper=function(obj){return Utils.getName(obj).includes(Utils.HELPER.PREFIX)},Utils.isFogPlane=function(obj){return Utils.getName(obj).includes(Utils.FOGPLANE.PREFIX)},Utils.isCollider=function(obj){return Utils.getName(obj).includes(Utils.COLLIDER.PREFIX)},Utils.isStatic=function(obj){return Utils.getName(obj).includes(Utils.STATIC.PREFIX)},Utils.isLight=function(obj){return Utils.getName(obj).includes(Utils.LIGHT.PREFIX)},Utils.isMesh=function(obj){return obj instanceof THREE.Mesh},Utils.isGroup=function(obj){return obj instanceof THREE.Group},Utils.isScene=function(obj){return obj instanceof THREE.Scene},Utils.isFace=function(obj){return Utils.isMesh(obj)&!Utils.isHelper(obj)&!Utils.isFogPlane(obj)&!Utils.isCollider(obj)&!Utils.isLight(obj)},Utils.printMesh=function(mesh){var str="Name:\t"+mesh.name+",\t";str+="Type:\t"+mesh.type+",\t",str+="Parent:\t"+mesh.parent.name+",\t",str+="Children:\t"+mesh.children.length,Utils.printSecondary(str)},Utils.getFileName=function(path){const sp=path.split("/"),name=sp[sp.length-1];if(!name)return;const ext=name.split(".");return ext.length>0?ext[0]:ext},Graphics.prototype.init=function(options,callback){return new Promise((resolve,reject)=>{this.scene=this.createScene(),this.camera=this.createCamera(),this.renderer=this.createRenderer(),document.body.appendChild(this.renderer.domElement),this.options.ambientLight=Utils.opts(this.options.ambientLight,Options.graphics.ambientLight),this.options.ambientLight.enabled&&this.addAmbientLight(this.options.ambientLight),this.options.pointLight=Utils.opts(this.options.pointLight,Options.graphics.pointLight),this.options.pointLight.enabled&&this.addPointLight(this.options.pointLight),this.options.spotLight=Utils.opts(this.options.spotLight,Options.graphics.spotLight),this.options.spotLight.enabled&&this.addSpotLight(this.options.spotLight),this.options.directionalLight=Utils.opts(this.options.directionalLight,Options.graphics.directionalLight),this.options.directionalLight.enabled&&this.addDirectionalLight(this.options.directionalLight),this.options.stats=Utils.opts(this.options.stats,Options.graphics.stats),this.options.stats.enabled&&this.addStats(this.options.stats),this.options.controls=Utils.opts(this.options.controls,Options.graphics.controls),this.options.controls.enabled&&this.createControls(this.options.controls),this.options.sceneType=Utils.opts(this.options.sceneType,Options.graphics.sceneType),this.setSceneType(this.options.sceneType),this.options.grids=Utils.opts(this.options.grids,Options.graphics.grids),this.options.grids.enabled&&this.addGrids(this.options.grids),this.options.axes=Utils.opts(this.options.axes,Options.graphics.axes),this.options.axes.enabled&&this.addAxes(this.options.axes),(options=Utils.opts(options,{})).envPath=Utils.opts(options.envPath,Options.graphics.env.path),options.models=Utils.opts(options.models,Options.graphics.models),options.start=Utils.opts(options.start,Options.graphics.start),options.callback=Utils.opts(options.callback,Options.graphics.callback);const self=this;function _do_resolve_callback(resolve,glTFs,cubeTexture){var ret={Graphics:this,glTFs:glTFs,envMap:cubeTexture};resolve(ret),callback&&callback(ret),options.callback&&(self.callback=options.callback),options.start&&self.start(self.callback)}this.loadCubeTexture(options.envPath,cubeTexture=>{Utils.printInfo('Environment map "'+options.envPath+'" is loaded'),self.envMap=cubeTexture,"env"==this.options.sceneType&&(self.scene.background=cubeTexture);let glTFs=[];if(options.models.length>0){var cnt=0;options.models.forEach(file=>{self.loadGLTF(file,gltf=>{glTFs.push(gltf),Utils.printInfo('glTF model "'+file+'" is loaded'),self.scene.add(gltf.scene),this.options.useReflection=Utils.opts(this.options.useReflection,Options.graphics.useReflection),this.options.useReflection&&self.applyReflectionMap(gltf.scene),++cnt>=options.models.length&&_do_resolve_callback(resolve,glTFs,cubeTexture)})})}else Utils.printWarning("Graphics.init: No model/file is provided"),_do_resolve_callback(resolve,glTFs,cubeTexture)})})},Graphics.prototype.addGrids=function(options){if(this.isGridsAdded())return;(options=options||{}).colorGrid=options.colorGrid?options.colorGrid:options.color;const defOpts=Options.graphics.grids,gridHelper=new THREE.GridHelper(Utils.opts(options.size,defOpts.size),Utils.opts(options.divisions,defOpts.divisions),Utils.opts(options.colorCenterLine,defOpts.colorCenterLine),Utils.opts(options.colorGrid,defOpts.colorGrid));gridHelper.name=Utils.HELPER.PREFIX+Utils.GRIDS.PREFIX,gridHelper.material.opacity=Utils.opts(options.opacity,.5),gridHelper.material.transparent=gridHelper.material.opacity<1,options.position=options.position||{},gridHelper.position.x=Utils.opts(options.position.x,defOpts.position.x),gridHelper.position.y=Utils.opts(options.position.y,defOpts.position.y),gridHelper.position.z=Utils.opts(options.position.z,defOpts.position.z),this.scene.add(gridHelper)},Graphics.prototype.isGridsAdded=function(options){for(var objects=this.getObjects(),i=0;i<objects.length;i++)if(objects[i].name.includes(Utils.HELPER.PREFIX+Utils.GRIDS.PREFIX))return!0;return!1},Graphics.prototype.toggleGrids=function(options){this.isGridsAdded()?this.removeGrids():this.addGrids()},Graphics.prototype.addAxes=function(options){for(var objects=this.getObjects(),i=0;i<objects.length;i++)if(objects[i].name===Utils.HELPER.PREFIX+Utils.AXES.PREFIX)return this;options=options||{};const defOpts=Options.graphics.axes,axesHelper=new THREE.AxesHelper(Utils.opts(options.size,defOpts.size));return axesHelper.name=Utils.HELPER.PREFIX+Utils.AXES.PREFIX,options.position=options.position||{},axesHelper.position.x=Utils.opts(options.position.x,defOpts.position.x),axesHelper.position.y=Utils.opts(options.position.y,defOpts.position.y),axesHelper.position.z=Utils.opts(options.position.z,defOpts.position.z),this.scene.add(axesHelper),this},Graphics.prototype.isAxesAdded=function(){for(var objects=this.getObjects(),i=0;i<objects.length;i++)if(objects[i].name===Utils.HELPER.PREFIX+Utils.AXES.PREFIX)return!0;return!1},Graphics.prototype.toggleAxes=function(){return this.isAxesAdded()?this.removeAxes():this.addAxes(),this},Graphics.prototype.removeGrids=function(){var grids=this.getObjectByName(Utils.HELPER.PREFIX+Utils.GRIDS.PREFIX);grids&&grids instanceof THREE.GridHelper&&this.scene.remove(grids),grids=void 0},Graphics.prototype.removeAxes=function(){var axes=this.getObjectByName(Utils.HELPER.PREFIX+Utils.AXES.PREFIX);axes&&axes instanceof THREE.AxesHelper&&this.scene.remove(axes),axes=void 0},Graphics.prototype.createCamera=function(options){options=Utils.opts(options,{});const defOpts=Options.graphics.camera,camera=new THREE.PerspectiveCamera(Utils.opts(options.fov,defOpts.fov),Utils.opts(options.aspect,defOpts.aspect),Utils.opts(options.near,defOpts.near),Utils.opts(options.far,defOpts.far));return camera.name=options.name?options.name:Utils.CAMERA.PREFIX+Utils.zerosPad(this.cameras.length,3),options.position=Utils.opts(options.position,{}),camera.position.set(Utils.opts(options.position.x,defOpts.position.x),Utils.opts(options.position.y,defOpts.position.y),Utils.opts(options.position.z,defOpts.position.z)),options.lookAt=Utils.opts(options.lookAt,{}),camera.lookAt(Utils.opts(options.lookAt.x,defOpts.lookAt.x),Utils.opts(options.lookAt.y,defOpts.lookAt.y),Utils.opts(options.lookAt.z,defOpts.lookAt.z)),this.cameras.push(camera),camera},Graphics.prototype.createControls=function(options){options=Utils.opts(options,{});const control=new OrbitControls(this.camera);return control.name=options.name?options.name:Utils.CONTROL.PREFIX+Utils.zerosPad(this.controls.length,3),options.controls=Utils.opts(options.controls,{}),control.enableKeys=Utils.opts(options.controls.enableKeys,Options.graphics.controls.enableKeys),control.enableDamping=Utils.opts(options.controls.enableDamping,Options.graphics.controls.enableDamping),control.enablePan=Utils.opts(options.controls.enablePan,Options.graphics.controls.enablePan),control.enableZoom=Utils.opts(options.controls.enableZoom,Options.graphics.controls.enableZoom),control.enableRotate=Utils.opts(options.controls.enableRotate,Options.graphics.controls.enableRotate),this.control=control,this.controls.push(control),control},Graphics.prototype.createScene=function(options){options=Utils.opts(options,{});const scene=new THREE.Scene;return scene.name=options.name?options.name:Utils.SCENE.PREFIX+Utils.zerosPad(this.scenes.length,3),this.scenes.push(scene),scene},Graphics.prototype.createAmbientLight=function(options){options=options||{};const defOpts=Options.graphics.ambientLight,ambientLight=new THREE.AmbientLight(Utils.opts(options.color,16777215));return ambientLight.intensity=Utils.opts(options.intensity,defOpts.intensity),ambientLight.name=Utils.LIGHT.PREFIX+Utils.AMBIENTLIGHT.PREFIX+Utils.zerosPad(this.ambientLights.length,3),ambientLight},Graphics.prototype.addAmbientLight=function(options){options=options||{};const ambientLight=this.createAmbientLight(options);return this.scene.add(ambientLight),this.ambientLights.push(ambientLight),ambientLight},Graphics.prototype.createPointLight=function(options){options=options||{};const defOpts=Options.graphics.pointLight,pointLight=new THREE.PointLight(Utils.opts(options.color,defOpts.color));return pointLight.name=Utils.LIGHT.PREFIX+Utils.POINTLIGHT.PREFIX+Utils.zerosPad(this.pointLights.length,3),pointLight.intensity=Utils.opts(options.intensity,defOpts.intensity),pointLight.castShadow=Utils.opts(options.castShadow,defOpts.castShadow),pointLight.distance=Utils.opts(options.distance,defOpts.distance),pointLight.decay=Utils.opts(options.decay,defOpts.decay),options.position=Utils.opts(options.position,defOpts.position),pointLight.position.copy(new THREE.Vector3(Utils.opts(options.position.x,defOpts.position.x),Utils.opts(options.position.y,defOpts.position.y),Utils.opts(options.position.z,defOpts.position.z))),options.shadow=Utils.opts(options.shadow,defOpts.shadow),pointLight.shadow.bias=Utils.opts(options.shadow.bias,defOpts.shadow.bias),options.shadow.mapSize=Utils.opts(options.shadow.mapSize,defOpts.shadow.mapSize),pointLight.shadow.mapSize.width=Utils.opts(options.shadow.mapSize.width,defOpts.shadow.mapSize.width),pointLight.shadow.mapSize.height=Utils.opts(options.shadow.mapSize.height,defOpts.shadow.mapSize.height),options.shadow.camera=Utils.opts(options.shadow.camera,defOpts.shadow.camera),pointLight.shadow.camera.visible=Utils.opts(options.shadow.camera.visible,defOpts.shadow.camera.visible),pointLight.shadow.camera.Fov=Utils.opts(options.shadow.camera.fov,defOpts.shadow.camera.fov),pointLight.shadow.camera.near=Utils.opts(options.shadow.camera.near,defOpts.shadow.camera.near),pointLight.shadow.camera.far=Utils.opts(options.shadow.camera.far,defOpts.shadow.camera.far),pointLight},Graphics.prototype.createPointLightHelper=function(pointLight,options){const defOpts=Options.graphics.pointLight.helper,pointLightHelper=new THREE.PointLightHelper(pointLight,Utils.opts(options.size,defOpts),Utils.opts(options.color,pointLight.color));return pointLightHelper.name=Utils.HELPER.PREFIX+pointLight.name,pointLightHelper},Graphics.prototype.addPointLight=function(options){options=options||{};const pointLight=this.createPointLight(options);if(this.scene.add(pointLight),options.helper=Utils.opts(options.helper,Options.graphics.pointLight.helper),options.helper.enabled){const pointLightHelper=this.createPointLightHelper(pointLight,options.helper);this.scene.add(pointLightHelper)}return this.pointLights.push(pointLight),pointLight},Graphics.prototype.createSpotLight=function(options){options=options||{};const defOpts=Options.graphics.spotLight,spotLight=new THREE.SpotLight(Utils.opts(options.color,defOpts.color));return spotLight.name=Utils.LIGHT.PREFIX+Utils.SPOTLIGHT.PREFIX+Utils.zerosPad(this.spotLights.length,3),options.position=Utils.opts(options.position,defOpts.position),spotLight.position.copy(new THREE.Vector3(Utils.opts(options.position.x,defOpts.position.x),Utils.opts(options.position.y,defOpts.position.y),Utils.opts(options.position.z,defOpts.position.z))),spotLight.intensity=Utils.opts(options.intensity,defOpts.intensity),spotLight.castShadow=Utils.opts(options.castShadow,defOpts.castShadow),spotLight.distance=Utils.opts(options.distance,defOpts.distance),spotLight.decay=Utils.opts(options.decay,defOpts.decay),spotLight.angle=Utils.opts(options.angle,defOpts.angle),spotLight.penumbra=Utils.opts(options.penumbra,defOpts.penumbra),options.shadow=Utils.opts(options.shadow,defOpts.shadow),spotLight.shadow.bias=Utils.opts(options.shadow.bias,defOpts.shadow.bias),options.shadow.mapSize=Utils.opts(options.shadow.mapSize,defOpts.shadow.mapSize),spotLight.shadow.mapSize.width=Utils.opts(options.shadow.mapSize.width,defOpts.shadow.mapSize.width),spotLight.shadow.mapSize.height=Utils.opts(options.shadow.mapSize.height,defOpts.shadow.mapSize.height),options.shadow.camera=Utils.opts(options.shadow.camera,defOpts.shadow.camera),spotLight.shadow.camera.visible=Utils.opts(options.shadow.camera.visible,defOpts.shadow.camera.visible),spotLight.shadow.camera.Fov=Utils.opts(options.shadow.camera.Fov,defOpts.shadow.camera.fov),spotLight.shadow.camera.near=Utils.opts(options.shadow.camera.near,defOpts.shadow.camera.near),spotLight.shadow.camera.far=Utils.opts(options.shadow.camera.far,defOpts.shadow.camera.far),spotLight},Graphics.prototype.createSpotLightHelper=function(spotLight,options){const spotLightHelper=new THREE.SpotLightHelper(spotLight,Utils.opts(options.color,spotLight.color));return spotLightHelper.name=Utils.HELPER.PREFIX+spotLight.name,spotLightHelper},Graphics.prototype.addSpotLight=function(options){options=Utils.opts(options,Options.graphics.spotLight);const spotLight=this.createSpotLight(options);if(this.scene.add(spotLight),options.helper=Utils.opts(options.helper,Options.graphics.spotLight.helper),options.helper.enabled){const spotLightHelper=this.createSpotLightHelper(spotLight,options.helper);this.scene.add(spotLightHelper)}return this.spotLights.push(spotLight),spotLight},Graphics.prototype.createDirectionalLight=function(options){options=options||{};const defOpts=Options.graphics.directionalLight,directionalLight=new THREE.DirectionalLight(Utils.opts(options.color,defOpts.color));return directionalLight.name=Utils.LIGHT.PREFIX+Utils.DIRECTIONALLIGHT.PREFIX+Utils.zerosPad(this.directionalLights.length,3),options.position=Utils.opts(options.position,defOpts.position),directionalLight.position.copy(new THREE.Vector3(Utils.opts(options.position.x,defOpts.position.x),Utils.opts(options.position.y,defOpts.position.y),Utils.opts(options.position.z,defOpts.position.z))),directionalLight.intensity=Utils.opts(options.intensity,defOpts.intensity),directionalLight.castShadow=Utils.opts(options.castShadow,defOpts.castShadow),options.shadow=Utils.opts(options.shadow,defOpts.shadow),directionalLight.shadow.bias=Utils.opts(options.shadow.bias,defOpts.shadow.bias),options.shadow.mapSize=Utils.opts(options.shadow.mapSize,defOpts.shadow.mapSize),directionalLight.shadow.mapSize.width=Utils.opts(options.shadow.mapSize.width,defOpts.shadow.mapSize.width),directionalLight.shadow.mapSize.height=Utils.opts(options.shadow.mapSize.height,defOpts.shadow.mapSize.height),options.shadow.camera=Utils.opts(options.shadow.camera,defOpts.shadow.camera),directionalLight.shadow.camera.visible=Utils.opts(options.shadow.camera.visible,defOpts.shadow.camera.visible),directionalLight.shadow.camera.near=Utils.opts(options.shadow.camera.near,defOpts.shadow.camera.near),directionalLight.shadow.camera.far=Utils.opts(options.shadow.camera.far,defOpts.shadow.camera.far),directionalLight.shadow.camera.top=Utils.opts(options.shadow.camera.top,options.shadow.camera.top),directionalLight.shadow.camera.bottom=Utils.opts(options.shadow.camera.bottom,options.shadow.camera.bottom),directionalLight.shadow.camera.right=Utils.opts(options.shadow.camera.right,options.shadow.camera.right),directionalLight.shadow.camera.left=Utils.opts(options.shadow.camera.left,options.shadow.camera.left),directionalLight},Graphics.prototype.createDirectionalLightHelper=function(directionalLight,options){const directionalLightHelper=new THREE.DirectionalLightHelper(directionalLight,Utils.opts(options.size,Options.graphics.directionalLight.helper.size),Utils.opts(options.color,directionalLight.color));return directionalLightHelper.name=Utils.HELPER.PREFIX+directionalLight.name,directionalLightHelper},Graphics.prototype.addDirectionalLight=function(options){options=options||{};const directionalLight=this.createDirectionalLight(options);if(this.scene.add(directionalLight),options.helper=Utils.opts(options.helper,Options.graphics.directionalLight.helper),options.helper.enabled){const directionalLightHelper=this.createDirectionalLightHelper(directionalLight,options.helper);this.scene.add(directionalLightHelper);const helper=new THREE.CameraHelper(directionalLight.shadow.camera);this.scene.add(helper)}return this.directionalLights.push(directionalLight),directionalLight},Graphics.prototype.update=function(){this.control&&(this.control.enableDamping||this.control.autoRotate)&&this.control.update(),this.stats.forEach(stats=>{stats.update()}),this.renderer.render(this.scene,this.camera)},Graphics.prototype.setSceneBackground=function(cubeTexture){this.envMap=cubeTexture,this.scene.background=cubeTexture},Graphics.prototype.addGroundPlane=function(options){this.fogPlane&&(this.scene.remove(this.fogPlane),this.fogPlane=void 0),options=Utils.opts(options,{});const fogPlane=new THREE.Mesh(new THREE.PlaneBufferGeometry(Utils.opts(options.width,1500),Utils.opts(options.height,1500)),new THREE.MeshBasicMaterial({color:Utils.opts(options.color,1052688),depthWrite:!1}));fogPlane.name=Utils.FOGPLANE.PREFIX,fogPlane.rotation.x=-Math.PI/2,fogPlane.position.y=-.05,fogPlane.receiveShadow=Utils.opts(options.receiveShadow,!1),this.scene.add(fogPlane),this.fogPlane=fogPlane},Graphics.prototype.removeGroundPlane=function(){this.scene.remove(this.fogPlane),this.fogPlane=void 0},Graphics.prototype.setSceneType=function(type,options){if("fog"===type){options=Utils.opts(options,{});const fogOpts=Options.graphics.fog,fogColor=new THREE.Color(Utils.opts(options.color,fogOpts.color));this.scene.fog||(this.scene.fog=new THREE.Fog(fogColor)),this.scene.fog.color=fogColor,this.scene.fog.near=Utils.opts(options.near,fogOpts.near),this.scene.fog.far=Utils.opts(options.far,fogOpts.far),this.scene.background=this.scene.fog.color,options.plane=Utils.opts(options.plane,Options.graphics.fog.plane),options.plane.enabled&&this.addGroundPlane(options.plane)}else"fog"!==type&&(this.scene.fog&&(this.scene.fog.near=.1,this.scene.fog.far=0),this.scene.background=new THREE.Color(Options.graphics.bkg.color),this.removeGroundPlane());if("env"===type&&void 0===this.envMap){options=Utils.opts(options,{});const path=Utils.opts(options.path,Options.graphics.env.path),self=this;this.loadCubeTexture(path,cubeMap=>{self.envMap=cubeMap,self.scene.background=cubeMap,options.useReflection=Utils.opts(options.useReflection,Options.graphics.useReflection),options.useReflection&&self.applyReflectionMap(void 0)})}"basic"===type&&(options=Utils.opts(options,{}),this.scene.background=new THREE.Color(Utils.opts(options.color,Options.graphics.bkg.color)),options.plane=Utils.opts(options.plane,Options.graphics.bkg.plane),options.plane.enabled&&this.addGroundPlane(options.plane))},Graphics.prototype.createRenderer=function(options){options=Utils.opts(this.options.renderer,{});const defOpts=Options.graphics.renderer,renderer=new THREE.WebGLRenderer({antialias:Utils.opts(options.antialias,defOpts.antialias),alpha:Utils.opts(options.alpha,defOpts.alpha)});return renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(window.devicePixelRatio),renderer.name=options.name?options.name:Utils.RENDERER.PREFIX+Utils.zerosPad(this.renderers.length,3),renderer.gammaInput=Utils.opts(options.gammaInput,defOpts.gammaInput),renderer.gammaOutput=Utils.opts(options.gammaOutput,defOpts.gammaOutput),options.shadowMap=Utils.opts(options.shadowMap,defOpts.shadowMap),renderer.shadowMap.enabled=Utils.opts(options.shadowMap.enabled,defOpts.shadowMap.enabled),renderer.shadowMap.soft=Utils.opts(options.shadowMap.soft,defOpts.shadowMap.soft),renderer.shadowMap.type=Utils.opts(options.shadowMap.type,defOpts.shadowMap.type),this.renderers.push(renderer),renderer},Graphics.prototype.addStats=function(options){options=options||{};const stats=new Stats;stats.showPanel(Utils.opts(options.type,0)),document.body.appendChild(stats.dom);Utils.opts(options.left,0),Utils.opts(options.top,0);return stats.dom.style.cssText="position: absolute;bottom: 0; opacity:0.7; z-index:999",this.stats.push(stats),this},Graphics.prototype.setCameraPosition=function(x,y,z){return this.camera.position.set(x,y,z),this.control&&this.options.controls.enabled&&this.control.update(),this},Graphics.prototype.applyReflectionMap=function(target){var meshes=[],scene=void 0===target?this.scene:target;return target instanceof THREE.Mesh?meshes.push(target):scene.traverse(child=>{child instanceof THREE.Mesh&&Utils.isFace(child)&&meshes.push(child)}),void 0===this.envMap?this.loadCubeTexture(void 0,cubeMap=>{this.envMap=cubeMap,meshes.forEach(child=>{child.material.envMap=this.envMap,child.material.needsUpdate=!0})}):meshes.forEach(child=>{child.material.envMap=this.envMap,child.material.needsUpdate=!0}),meshes=void 0,this},Graphics.prototype.removeReflectionMap=function(target){var meshes=[],scene=void 0===target?this.scene:target;target instanceof THREE.Mesh?meshes.push(child):scene.traverse(child=>{child instanceof THREE.Mesh&&Utils.isFace(child)&&meshes.push(child)}),meshes.forEach(child=>{child.material.envMap=void 0,child.material.needsUpdate=!0}),meshes=void 0},Graphics.prototype.loadGLTF=function(path,callback){return new Promise((resolve,reject)=>{const loader=new GLTFLoader;loader.crossOrigin="anonymous",loader.load(path,function(gltf){gltf.scene.name=Utils.SCENE.PREFIX+Utils.getFileName(path),gltf.scene.traverse(function(child){child instanceof THREE.Mesh&&child.parent instanceof THREE.Scene||child instanceof THREE.Group&&child.traverse(function(c){}),child instanceof THREE.Mesh&&child.traverse(function(c){c.castShadow=!0,c.receiveShadow=!0})}),resolve(gltf),callback&&callback(gltf)})})},Graphics.prototype.loadCubeTexture=function(path,callback){return new Promise((resolve,reject)=>{void 0===path&&(path=Options.graphics.env.path),path+="/"!==path[path.length-1]?"/":"";const loader=(new THREE.CubeTextureLoader).setPath(path);loader.crossOrigin="anonymous";loader.load(["posx.jpg","negx.jpg","posy.jpg","negy.jpg","posz.jpg","negz.jpg"],cubeTexture=>{cubeTexture.format=THREE.RGBAFormat;var ss=path.split("/");cubeTexture.name=Utils.CUBETEXTURE.PREFIX+ss[ss.length-2],resolve(cubeTexture),callback&&callback(cubeTexture)},xhr=>{},err=>{reject("Error: The CubeTexture "+path+" cannot be downloaded!")})})},Graphics.prototype.loadTexture=function(path,callback){},Graphics.prototype.addAxesToMesh=function(mesh,size){if(mesh.children){var added=!1;for(let i=0;i<mesh.children.length;i++)if(mesh.children[i]instanceof THREE.LineSegments){added=!0;break}if(!added){size=Utils.opts(size,2);var axes=new THREE.AxesHelper(size);axes.scale.x=size/mesh.scale.x,axes.scale.y=size/mesh.scale.y,axes.scale.z=size/mesh.scale.z,axes.name=Utils.HELPER.PREFIX+Utils.AXES.PREFIX+mesh.name,mesh.add(axes)}return this}},Graphics.prototype.addAxesToAllMeshes=function(size){const self=this;return size=Utils.opts(size,2),this.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&mesh.parent instanceof THREE.Scene&&self.addAxesToMesh(mesh,size)}),this},Graphics.prototype.removeAxesFromMesh=function(mesh){var axes=void 0;for(let i=0;i<mesh.children.length;i++)if(mesh.children[i]instanceof THREE.LineSegments){axes=mesh.children[i];break}return axes&&mesh.remove(axes),this},Graphics.prototype.removeAxesFromAllMeshes=function(){const self=this;return this.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&self.removeAxesFromMesh(mesh)}),this},Graphics.prototype.countMeshes=function(){var count=0;return this.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&(!(child.parent instanceof THREE.Scene)||Utils.isHelper(child)||Utils.isLight(child)||Utils.isDebugger(child)||Utils.isFogPlane(child)||count++)}),count},Graphics.prototype.getMeshes=function(){const meshes=[];return this.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&(Utils.isHelper(child)||Utils.isLight(child)||Utils.isDebugger(child)||Utils.isFogPlane(child)||meshes.push(child))}),meshes},Graphics.prototype.getFaces=function(){const meshes=[];return this.scene.traverse(child=>{child instanceof THREE.Mesh?!(child.parent instanceof THREE.Scene)||Utils.isHelper(child)||Utils.isLight(child)||Utils.isDebugger(child)||Utils.isFogPlane(child)||meshes.push(child):child instanceof THREE.Group&&child.traverse(c=>{Utils.isHelper(c)||Utils.isLight(c)||Utils.isDebugger(c)||Utils.isFogPlane(c)||meshes.push(c)})}),meshes},Graphics.prototype.getFaces=function(){const meshes=[];return this.scene.traverse(child=>{child instanceof THREE.Mesh?!(child.parent instanceof THREE.Scene)||Utils.isHelper(child)||Utils.isLight(child)||Utils.isDebugger(child)||Utils.isFogPlane(child)||meshes.push(child):child instanceof THREE.Group&&child.traverse(c=>{Utils.isHelper(c)||Utils.isLight(c)||Utils.isDebugger(c)||Utils.isFogPlane(c)||meshes.push(c)})}),meshes},Graphics.prototype.getMeshByName=function(name){for(var meshes=this.getMeshes(),target=name.toLowerCase(),i=0;i<meshes.length;i++){var mesh=meshes[i];if(mesh.name.toLowerCase()===target&&(mesh instanceof THREE.Mesh||mesh instanceof THREE.Group))return mesh}Utils.printWarning('Graphics.getMeshByName: The mesh/group "'+name+'" cannot be found')},Graphics.prototype.getMeshesFromScene=function(scene){const _scene=scene||this.scene,meshes=[];return _scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&(!(child.parent instanceof THREE.Scene)||Utils.isHelper(child)||Utils.isLight(child)||Utils.isDebugger(child)||Utils.isFogPlane(child)||meshes.push(child))}),meshes},Graphics.prototype.getObjects=function(){var objects=[];return this.scene.traverse(obj=>{objects.push(obj)}),objects},Graphics.prototype.getObjectByName=function(name){for(var meshes=this.getObjects(),target=name.toLowerCase(),i=0;i<meshes.length;i++){var mesh=meshes[i];if(mesh.name.toLowerCase()===target)return mesh}Utils.printWarning('Graphics.getObjectByName: The object "'+name+'" cannot be found')},Graphics.prototype.getScenes=function(){const scenes=[];return this.scene.traverse(child=>{child instanceof THREE.Scene&&scenes.push(child)}),scenes},Graphics.prototype.getSceneByName=function(name){const scenes=this.getScenes();for(var target=name.toLowerCase(),i=0;i<scenes.length;i++)if(scenes[i].name.toLowerCase()===target&&child instanceof THREE.Scene)return scenes[i];Utils.printWarning('Graphics.getSceneByName: The scene "'+name+'" cannot be found')},Graphics.prototype.getParentScene=function(){const scenes=this.getScenes();for(var i=0;i<scenes.length;i++)if(!scenes[i].parent)return scenes[i]},Graphics.prototype.getMainScene=function(){return this.getParentScene()},Graphics.prototype.getChildScenes=function(){const childScenes=[],mainScane=this.getParentScene(),scenes=this.getScenes();for(var i=0;i<scenes.length;i++)scenes[i].parent===mainScane&&childScenes.push(scenes[i]);return childScenes},Graphics.prototype.getSubScenes=function(){return this.getChildScenes()},Graphics.prototype.clearScene=function(scene){if(scene&&scene instanceof THREE.Scene){for(;scene.children.length>0;)this.clearScene(scene.children[0]),scene.remove(scene.children[0]);scene.geometry&&scene.geometry.dispose(),scene.material&&scene.material.dispose(),scene.texture&&scene.texture.dispose()}},Graphics.prototype.printScene=function(scene){scene=scene||this.scene;var colors=["#000000","#005be5","#9403bc","#01914b","#915501","#3f0191","#917901"];scene.traverse(child=>{for(var str="",p=child,i=0;p;)p=p.parent,str+="   ",i++;console.log("%c"+str+"-> "+i+") name: "+child.name+"\ttype: "+child.type+"\tnc: "+child.children.length,"color:"+colors[i])})};class BodyDebug{constructor(graphics,physics,options){options=options||{},this.graphics=graphics,this.physics=physics,this.scene=new THREE.Scene,this.scene.name=Utils.SCENE.PREFIX+Utils.BODYDEBUG.PREFIX,this.world=physics.world,this.graphics.scene.add(this.scene),this.visibled=!0,this._meshes=[],this._material=new THREE.MeshBasicMaterial({color:options.color||13421568,wireframe:!0}),this._sphereGeometry=new THREE.SphereGeometry(1),this._boxGeometry=new THREE.BoxGeometry(1,1,1),this._planeGeometry=new THREE.PlaneGeometry(10,10,10,10),this._cylinderGeometry=new THREE.CylinderGeometry(1,1,10,10),this.tmpVec0=new CANNON.Vec3,this.tmpVec1=new CANNON.Vec3,this.tmpVec2=new CANNON.Vec3,this.tmpQuat0=new CANNON.Vec3}getPrefix(){return Utils.HELPER.PREFIX+Utils.BODYDEBUG.PREFIX}update(){for(var bodies=this.world.bodies,meshes=this._meshes,shapeWorldPosition=this.tmpVec0,shapeWorldQuaternion=this.tmpQuat0,meshIndex=0,i=0;i!==bodies.length;i++)for(var body=bodies[i],j=0;j!==body.shapes.length;j++){var shape=body.shapes[j];this._updateMesh(meshIndex,shape),(mesh=meshes[meshIndex])&&(body.quaternion.vmult(body.shapeOffsets[j],shapeWorldPosition),body.position.vadd(shapeWorldPosition,shapeWorldPosition),body.quaternion.mult(body.shapeOrientations[j],shapeWorldQuaternion),mesh.position.copy(shapeWorldPosition),mesh.quaternion.copy(shapeWorldQuaternion)),meshIndex++}for(i=meshIndex;i<meshes.length;i++){var mesh;(mesh=meshes[i])&&this.scene.remove(mesh)}return meshes.length=meshIndex,this}_updateMesh(index,shape){var mesh=this._meshes[index];this._typeMatch(mesh,shape)||(mesh&&this.scene.remove(mesh),mesh=this._meshes[index]=this._createMesh(shape)),this._scaleMesh(mesh,shape)}_typeMatch(mesh,shape){if(!mesh)return!1;var geo=mesh.geometry;return geo instanceof THREE.SphereGeometry&&shape instanceof CANNON.Sphere||geo instanceof THREE.BoxGeometry&&shape instanceof CANNON.Box||geo instanceof THREE.PlaneGeometry&&shape instanceof CANNON.Plane||geo.id===shape.geometryId&&shape instanceof CANNON.ConvexPolyhedron||geo.id===shape.geometryId&&shape instanceof CANNON.Trimesh||geo.id===shape.geometryId&&shape instanceof CANNON.Heightfield}_createMesh(shape){var mesh,material=this._material,typeName="";switch(shape.type){case CANNON.Shape.types.SPHERE:mesh=new THREE.Mesh(this._sphereGeometry,material),typeName="sphere";break;case CANNON.Shape.types.BOX:mesh=new THREE.Mesh(this._boxGeometry,material),typeName="box";break;case CANNON.Shape.types.PLANE:mesh=new THREE.Mesh(this._planeGeometry,material),typeName="plane";break;case CANNON.Shape.types.CONVEXPOLYHEDRON:typeName="convexpolyhedron";for(var geo=new THREE.Geometry,i=0;i<shape.vertices.length;i++){var v=shape.vertices[i];geo.vertices.push(new THREE.Vector3(v.x,v.y,v.z))}for(i=0;i<shape.faces.length;i++)for(var face=shape.faces[i],a=face[0],j=1;j<face.length-1;j++){var b=face[j],c=face[j+1];geo.faces.push(new THREE.Face3(a,b,c))}geo.computeBoundingSphere(),geo.computeFaceNormals(),mesh=new THREE.Mesh(geo,material),shape.geometryId=geo.id;break;case CANNON.Shape.types.TRIMESH:typeName="trimesh";var geometry=new THREE.Geometry,v0=this.tmpVec0,v1=this.tmpVec1,v2=this.tmpVec2;for(i=0;i<shape.indices.length/3;i++){shape.getTriangleVertices(i,v0,v1,v2),geometry.vertices.push(new THREE.Vector3(v0.x,v0.y,v0.z),new THREE.Vector3(v1.x,v1.y,v1.z),new THREE.Vector3(v2.x,v2.y,v2.z));j=geometry.vertices.length-3;geometry.faces.push(new THREE.Face3(j,j+1,j+2))}geometry.computeBoundingSphere(),geometry.computeFaceNormals(),mesh=new THREE.Mesh(geometry,material),shape.geometryId=geometry.id;break;case CANNON.Shape.types.HEIGHTFIELD:typeName="heightfield";geometry=new THREE.Geometry,v0=this.tmpVec0,v1=this.tmpVec1,v2=this.tmpVec2;for(var xi=0;xi<shape.data.length-1;xi++)for(var yi=0;yi<shape.data[xi].length-1;yi++)for(var k=0;k<2;k++){shape.getConvexTrianglePillar(xi,yi,0===k),v0.copy(shape.pillarConvex.vertices[0]),v1.copy(shape.pillarConvex.vertices[1]),v2.copy(shape.pillarConvex.vertices[2]),v0.vadd(shape.pillarOffset,v0),v1.vadd(shape.pillarOffset,v1),v2.vadd(shape.pillarOffset,v2),geometry.vertices.push(new THREE.Vector3(v0.x,v0.y,v0.z),new THREE.Vector3(v1.x,v1.y,v1.z),new THREE.Vector3(v2.x,v2.y,v2.z));i=geometry.vertices.length-3;geometry.faces.push(new THREE.Face3(i,i+1,i+2))}geometry.computeBoundingSphere(),geometry.computeFaceNormals(),mesh=new THREE.Mesh(geometry,material),shape.geometryId=geometry.id}return mesh&&(mesh.name=this.getPrefix()+typeName+"_"+Utils.generateId(),this.scene.add(mesh)),mesh}_scaleMesh(mesh,shape){switch(shape.type){case CANNON.Shape.types.SPHERE:var radius=shape.radius;mesh.scale.set(radius,radius,radius);break;case CANNON.Shape.types.BOX:mesh.scale.copy(shape.halfExtents),mesh.scale.multiplyScalar(2);break;case CANNON.Shape.types.CONVEXPOLYHEDRON:mesh.scale.set(1,1,1);break;case CANNON.Shape.types.TRIMESH:mesh.scale.copy(shape.scale);break;case CANNON.Shape.types.HEIGHTFIELD:mesh.scale.set(1,1,1)}}setVisible(visible){this.physics.options.debug.enabled=visible;const self=this;return this.visibled=!0===visible||!1===visible?visible:this.visibled,this.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&mesh.name.includes(this.getPrefix())&&(mesh.visible=self.visibled)}),self.visibled}hide(){return this.setVisible(!1)}show(){return this.setVisible(!0)}toggleVisible(){return this.visibled=!this.visibled,this.setVisible(this.visibled),this.visibled}toggle(){return this.toggleVisible()}}function Physics(graphics,options){this.options=options||{},this.graphics=graphics,this.world=void 0,this.bodyDebug=void 0}Physics.prototype.init=function(){this.options=Utils.opts(this.options,{});const defOpts=Options.physics;this.options.enabled=Utils.opts(this.options.enabled,defOpts.enabled),this.options.timeStep=Utils.opts(this.options.timeStep,defOpts.timeStep),this.options.subSteps=Utils.opts(this.options.subSteps,defOpts.subSteps),this.options.debug=Utils.opts(this.options.debug,{}),this.options.debug.enabled=Utils.opts(this.options.debug.enabled,defOpts.debug.enabled),this.options.debug.color=Utils.opts(this.options.debug.color,defOpts.debug.color),this.options.debug.offset=Utils.opts(this.options.debug.offset,defOpts.debug.offset),this.options.world=Utils.opts(this.options.world,{}),this.options.world.gravity=Utils.opts(this.options.world.gravity,defOpts.world.gravity),this.options.world.allowSleep=Utils.opts(this.options.worldallowSleep,defOpts.world.allowSleep),this.options.world.quatNormalizeFast=Utils.opts(this.options.worldallowSleep,defOpts.world.quatNormalizeFast),this.options.world.quatNormalizeSkip=Utils.opts(this.options.worldallowSleep,defOpts.world.quatNormalizeSkip),this.world=new CANNON.World,this.world.allowSleep=this.options.world.allowSleep,this.world.gravity=this.options.world.gravity,this.world.quatNormalizeFast=this.options.world.quatNormalizeFast,this.world.quatNormalizeSkip=this.options.world.quatNormalizeSkip,this.options.world.broadphase=Utils.opts(this.options.world.broadphase,{}),this.options.world.broadphase.useBoundingBoxes=Utils.opts(this.options.world.broadphase.useBoundingBoxes,defOpts.world.broadphase.useBoundingBoxes),this.world.broadphase=new CANNON.NaiveBroadphase,this.world.broadphase.useBoundingBoxes=this.options.world.broadphase.useBoundingBoxes,this.options.world.defaultContactMaterial=Utils.opts(this.options.world.defaultContactMaterial,{}),this.options.world.defaultContactMaterial.contactEquationStiffness=Utils.opts(this.options.world.defaultContactMaterial.contactEquationStiffness,defOpts.world.defaultContactMaterial.contactEquationStiffness),this.options.world.defaultContactMaterial.contactEquationRelaxation=Utils.opts(this.options.world.defaultContactMaterial.contactEquationRelaxation,defOpts.world.defaultContactMaterial.contactEquationRelaxation),this.world.defaultContactMaterial.contactEquationStiffness=this.options.world.defaultContactMaterial.contactEquationStiffness,this.world.defaultContactMaterial.contactEquationRelaxation=this.options.world.defaultContactMaterial.contactEquationRelaxation,this.options.solver=Utils.opts(this.options.solver,{}),this.options.solver.iterations=Utils.opts(this.options.solver.iterations,defOpts.solver.iterations),this.options.solver.tolerance=Utils.opts(this.options.solver.tolerance,defOpts.solver.tolerance),this.options.solver.split=Utils.opts(this.options.solver.split,defOpts.solver.split);const solver=new CANNON.GSSolver;return this.options.solver.split?this.world.solver=new CANNON.SplitSolver(solver):this.world.solver=solver,this.enabled=this.options.enabled,this.timeStep=this.options.timeStep,this.gravity=this.options.world.gravity,this.bodyDebug=new BodyDebug(this.graphics,this,{color:this.options.debug.color}),this},Physics.prototype.update=function(dt_ms){if(!1===this.enabled)return this;let DT;if(dt_ms=void 0===dt_ms?1/60:dt_ms,"dt"===this.timeStep){var dts=dt_ms/1e3;dts>.2&&(Utils.printWarning("The dt="+dts.toFixed(3)+" > "+.2.toFixed(3)+", changed to "+(1/60).toFixed(3)),dts=1/60),DT=dts}else DT=this.timeStep;DT/=this.options.subSteps;for(let i=0;i<this.options.subSteps;i++)this.world.step(DT);var removedBodies=[];for(let j=0;j<this.world.bodies.length;j++){let body=this.world.bodies[j];body.threemesh&&(body.threemesh.position.copy(body.position),body.threemesh.quaternion.copy(body.quaternion),body.position.y<-10&&removedBodies.push(body))}this.options.debug.enabled&&this.bodyDebug.update(),removedBodies.length>0&&this.removeFarObjects(removedBodies)},Physics.prototype.removeFarObjects=function(bodies){console.group("Removing Objects");for(let i=0;i<bodies.length;i++){let body=bodies[i],mesh=body.threemesh;for(;mesh.children.length>0;){let c=mesh.children[0];console.log(c.name+" is removed"),mesh.remove(c),c=null}mesh.parent&&(mesh.parent.remove(mesh),console.log(mesh.name+" is removed"));let constraints=[];for(let k=0;k<this.world.constraints.length;k++){let con=this.world.constraints[k];con.bodyA&&con.bodyA===body&&constraints.push(con),con.bodyB&&con.bodyB===body&&constraints.push(con)}for(let k=0;k<constraints.length;k++)console.log(constraints[k].id+" is removed"),this.world.removeConstraint(constraints[k]);this.world.remove(body),body=null,mesh=null}let scenes=[];this.graphics.scene.traverse(s=>{s instanceof THREE.Scene&&s.children.length<=0&&scenes.push(s)});for(let i=0;i<scenes.length;i++){let s=scenes[i];s.parent&&s.parent.remove(s)}console.groupEnd()},Physics.prototype.start=function(){this.enabled=this.options.enabled=!0},Physics.prototype.stop=function(){this.enabled=this.options.enabled=!1},Physics.prototype.enebleProfiling=function(enabled){this.world.doProfiling=enabled},Physics.prototype.getProfiling=function(){return this.world.profile},Physics.prototype.getBodies=function(){return this.world.bodies},Physics.prototype.getBodiesFromWorld=function(){return this.world.bodies},Physics.prototype.getBodyByMeshName=function(name){var targets=[],bodies=this.world.bodies;for(let i=0;i<bodies.length;i++){const body=bodies[i];body.threemesh&&(body.threemesh.name.toLowerCase()===name.toLowerCase()&&targets.push(body))}return targets.length>1&&console.log("getBodyByMeshName: Found + "+targets.length+" bodies. Only the first body is returned"),targets[0]},Physics.prototype.changeBodyToStatic=function(body){return body.type=CANNON.Body.STATIC,body.mass=0,body.updateMassProperties(),body.aabbNeedsUpdate=!0,body},Physics.prototype.changeBodyToDynamic=function(body,mass){return body.type=CANNON.Body.DYNAMIC,body.mass=mass||(Math.abs(mesh.scale.x)+Math.abs(mesh.scale.y)+Math.abs(mesh.scale.z))/3,body.updateMassProperties(),body.aabbNeedsUpdate=!0,body},Physics.prototype.createBoxShape=function(mesh){const offset=this.options.debug.offset,halfExtents=new CANNON.Vec3(Math.abs(mesh.scale.x)+offset,Math.abs(mesh.scale.y)+offset,Math.abs(mesh.scale.z)+offset);return new CANNON.Box(halfExtents)},Physics.prototype.createBoxBody=function(child,mass){const shape=this.createBoxShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createPlaneShape=function(mesh){const offset=this.options.debug.offset,halfExtents=new CANNON.Vec3(Math.abs(mesh.scale.x)+offset,.05+offset,Math.abs(mesh.scale.z)+offset);return new CANNON.Box(halfExtents)},Physics.prototype.createPlaneBody=function(child,mass){const shape=this.createPlaneShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createInfinitePlaneBody=function(){let plane=new CANNON.Plane,body=new CANNON.Body({mass:0,position:new CANNON.Vec3(0,0,0)}),q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),body.addShape(plane,new CANNON.Vec3,q),body},Physics.prototype.createSphereShape=function(mesh){const offset=this.options.debug.offset,halfExtents=Math.abs(mesh.scale.x)+3*offset;return new CANNON.Sphere(halfExtents)},Physics.prototype.createSphereBody=function(child,mass){const shape=this.createSphereShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createCylinderShape=function(child,isCollider){const offset=this.options.debug.offset,radiusTop=Math.abs(child.scale.x),radiusBottom=radiusTop,height=2*Math.abs(child.scale.y);let segments="number"==typeof child.userData.segments?child.userData.segments:8;segments<5&&(segments=5);const cylinderShape=new CANNON.Cylinder(radiusTop+offset,radiusBottom+offset,height+offset,segments);if(!0!==isCollider){let q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),cylinderShape.transformAllPoints(new CANNON.Vec3,q),cylinderShape}let q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2+child.rotation.x),cylinderShape.transformAllPoints(new CANNON.Vec3,q),q.setFromAxisAngle(new CANNON.Vec3(0,0,1),child.rotation.z),cylinderShape.transformAllPoints(new CANNON.Vec3,q),cylinderShape},Physics.prototype.createCylinderBody=function(child,mass,isCollider){const shape=this.createCylinderShape(child,isCollider),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createConeShape=function(child,isCollider){const offset=this.options.debug.offset,radiusBottom=Math.abs(child.scale.x),height=2*Math.abs(child.scale.y);let segments="number"==typeof child.userData.segments?child.userData.segments:8;segments<5&&(segments=5);const coneShape=new CANNON.Cylinder(.001+offset,radiusBottom+offset,height+offset,segments);if(!0!==isCollider){let q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),coneShape.transformAllPoints(new CANNON.Vec3,q),coneShape}let q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2+child.rotation.x),coneShape.transformAllPoints(new CANNON.Vec3,q),q.setFromAxisAngle(new CANNON.Vec3(0,0,1),child.rotation.z),coneShape.transformAllPoints(new CANNON.Vec3,q),coneShape},Physics.prototype.createConeBody=function(child,mass){const shape=this.createConeShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createTorusShape=function(child){const offset=this.options.debug.offset,radiusTop=1.25*Math.abs(child.scale.x),radiusBottom=radiusTop,height=.5*Math.abs(child.scale.y);let segments="number"==typeof child.userData.segments?child.userData.segments:8;segments<5&&(segments=5);const torusShape=new CANNON.Cylinder(radiusTop+offset,radiusBottom+offset,height+offset,segments);var q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),torusShape.transformAllPoints(new CANNON.Vec3,q),torusShape},Physics.prototype.createTorusBody=function(child,mass){const shape=this.createTorusShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body},Physics.prototype.createShapeFromMesh=function(mesh,isCollider){const name=mesh.name.toLowerCase();return name.includes("cube")||name.includes("box")?this.createBoxShape(mesh):name.includes("plane")?this.createPlaneShape(mesh):name.includes("ball")||name.includes("sphere")||name.includes("icosphere")||name.includes("icosahedron")?this.createSphereShape(mesh):name.includes("cylinder")?this.createCylinderShape(mesh,isCollider):name.includes("cone")?this.createConeShape(mesh,isCollider):name.includes("torus")?this.createTorusShape(mesh,isCollider):void 0},Physics.prototype.createBodyFromMesh=function(mesh){const name=mesh.name.toLowerCase(),mass=name.includes("static")?0:(Math.abs(mesh.scale.x)+Math.abs(mesh.scale.y)+Math.abs(mesh.scale.z))/3;return name.includes("cube")||name.includes("box")?this.createBoxBody(mesh,mass):name.includes("plane")?this.createPlaneBody(mesh,mass):name.includes("ball")||name.includes("sphere")||name.includes("icosphere")||name.includes("icosahedron")?this.createSphereBody(mesh,mass):name.includes("cylinder")?this.createCylinderBody(mesh,mass):name.includes("cone")?this.createConeBody(mesh,mass):name.includes("torus")?this.createTorusBody(mesh,mass):void 0},Physics.prototype.createBodiesFromScene=function(scene){const self=this;var body=void 0,created=!1;return scene.traverse(mesh=>{mesh instanceof THREE.Group?(body=self.createBodyFromMesh(mesh),created=!0):mesh instanceof THREE.Mesh&&mesh.parent instanceof THREE.Scene&&(body=self.createBodyFromMesh(mesh),created=!0),created&&(body&&self.world.add(body),created=!1)}),this},Physics.prototype.showDebug=function(){return this.options.debug.enabled=!0,this.bodyDebug.setVisible(!0),this},Physics.prototype.hideDebug=function(){return this.options.debug.enabled=!1,this.bodyDebug.setVisible(!1),this},Physics.prototype.toggleDebug=function(){return this.options.debug.enabled=!this.options.debug.enabled,this.bodyDebug.setVisible(this.options.debug.enabled),this},Physics.prototype.createGroundMaterial=function(friction,restitution){var groundMaterial=new CANNON.Material(Utils.PHYGROUNDMAT.PREFIX),groundContactMaterial=new CANNON.ContactMaterial(groundMaterial,groundMaterial,{friction:null!=friction?friction:.4,restitution:null!=restitution?restitution:0});return this.world.addContactMaterial(groundContactMaterial),groundMaterial},Physics.prototype.createObjectMaterial=function(friction,restitution,groundMaterial){var objectMaterial=new CANNON.Material(Utils.PHYOBJECTMAT.PREFIX),objectContactMaterial=new CANNON.ContactMaterial(groundMaterial,objectMaterial,{friction:null!=friction?friction:0,restitution:null!=restitution?restitution:.9});return this.world.addContactMaterial(objectContactMaterial),objectMaterial},Physics.prototype.clearWorld=function(){for(var bodies=[],i=0;i<this.world.bodies.length;i++)bodies.push(this.world.bodies[i]);for(i=0;i<bodies.length;i++)this.world.remove(bodies[i])};class KeyEvent{constructor(key){this.down=!1,this.key=key,this.keyCode=void 0,this.target=void 0,this.shift=!1,this.ctrl=!1,this.alt=!1,this.repeat=!1,this.timeOld=performance.now(),this.timeNew=0,this.timeDif=0,this.timeSum=0}}class Keyboard{constructor(callback,options){this.options=options||{},this.downTicks=0,this.callback=callback||null,this.event=new KeyEvent(""),this.keyDownList=[],document.addEventListener("keydown",event=>{var added=!1;for(let i=0;i<this.keyDownList.length;i++)if(this.keyDownList[i].key===event.key){added=!0;break}if(!added){var keyEvt=new KeyEvent(event.key);_updateParams(keyEvt,event,!0),this.keyDownList.push(keyEvt)}this.callback&&(_updateParams(this.event,event,!0),this.callback(this.event))}),document.addEventListener("keyup",event=>{this.downTicks=0;var idx=-1;for(let i=0;i<this.keyDownList.length;i++)if(this.keyDownList[i].key===event.key){idx=i;break}idx>=0&&this.keyDownList.splice(idx,1),this.callback&&(_updateParams(this.event,event,!1),this.callback(this.event))})}setCallback(callback){this.callback=callback}getKeyDown(key,time){for(let i=0;i<this.keyDownList.length;i++){var keyEvt=this.keyDownList[i];if(keyEvt.key===key){if(0==this.downTicks)return this.downTicks++,!0;if(time){var holdDownTime=Number(performance.now()-keyEvt.timeNew);return Number(holdDownTime)>Number(time)&&(keyEvt.timeNew=performance.now(),!0)}return!0}}return!1}}function _updateParams(target,event,isDown){target.down=isDown,target.key=event.key,target.keyCode=event.keyCode,target.shift=event.shiftKey,target.ctrl=event.ctrlKey,target.alt=event.altKey,target.repeat=event.repeat,target.target=event.target,target.timeOld=target.timeNew,target.timeNew=performance.now(),target.timeDif=isDown?target.timeNew-target.timeOld:0,target.timeSum=isDown?target.timeSum+target.timeDif:0}class LabelRenderer{constructor(graphics){this.graphics=graphics,this.visibled=!1,this.labels=[],this.initLabelRender()}static get NAME_PREFIX(){return Utils.MESHLABEL.PREFIX}static get LABEL_CLASS(){return"object_label"}initLabelRender(){this.renderer=new threeCss2drender.CSS2DRenderer,this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top="0",this.renderer.domElement.style.pointerEvents="none",this.renderer.domElement.style.position="absolute",document.body.appendChild(this.renderer.domElement)}getLabel(mesh){return mesh.labelItem}addLabel(mesh,desiredName){if(this.getLabel(mesh))return;const NAME=LabelRenderer.NAME_PREFIX+mesh.name;var text=document.createElement("div");text.className=LabelRenderer.LABEL_CLASS,text.textContent=desiredName||mesh.name,text.textContent=""===text.textContent?"No Name":text.textContent;var label=new threeCss2drender.CSS2DObject(text);return label.name=NAME,mesh.labelItem=label,label.parentMesh=mesh,label.offset=new THREE.Vector3(0,0,0),this.graphics.scene.add(label),this.labels.push(label),this.updatePosition(label),label}updatePosition(label){let mesh=label.parentMesh,position=new THREE.Vector3(0,0,0);(position=position.applyMatrix4(mesh.matrixWorld)).add(label.offset),label.position.copy(position)}update(){for(var i=0;i<this.labels.length;i++){let label=this.labels[i];label.parentMesh&&this.updatePosition(label)}}removeLabel(mesh){const label=this.getLabel(mesh);if(!label)return;const lbls=[];for(var i=0;i<this.labels.length;i++)this.labels[i].name!=label.name&&lbls.push(this.labels[i]);return this.labels=lbls,this.graphics.scene.remove(label),mesh.labelItem=null,this.labels}getTargetMeshs(){const meshes=[];this.graphics.scene.traverse(function(c){(c instanceof THREE.Mesh||c instanceof THREE.Group)&&meshes.push(c)});let rm=[];for(let i=0;i<meshes.length;i++){let p=meshes[i];for(let j=0;j<meshes.length;j++){let c=meshes[j];c.parent===p&&c.name.toLowerCase().includes("_")&&c.name.toLowerCase().includes(".")&&rm.push(c)}}let targets=[];for(let i=0;i<meshes.length;i++){let p=meshes[i],cnt=0;for(let j=0;j<rm.length;j++){if(p===rm[j]){cnt++;break}}0===cnt&&targets.push(p)}return targets}addLabelToObjects(){const meshes=this.getTargetMeshs();for(var i=0;i<meshes.length;i++){var s=meshes[i].name.toLowerCase();s.includes(Utils.HELPER.PREFIX)||s.includes(Utils.FOGPLANE.PREFIX)||this.addLabel(meshes[i])}return meshes}show(){return this.addLabelToObjects(),this.visibled=!0,this.visibled}hide(){return this.removeLabelFromObjects(),this.visibled=!1,this.visibled}toggle(){return this.visibled=!this.visibled,this.visibled?this.show():this.hide(),this.visibled}removeLabelFromObjects(){const meshes=this.getTargetMeshs();for(var i=0;i<meshes.length;i++)this.removeLabel(meshes[i]);return meshes}setLabelText(mesh,text){const label=this.getLabel(mesh);if(label)return label.element.innerHTML=text,label;this._print_label_not_found(mesh)}setLabelClass(mesh,className){const label=this.getLabel(mesh);if(label)return label.element.className=className,label;this._print_label_not_found(mesh)}addLabelClass(mesh,className){const label=this.getLabel(mesh);if(label)return label.element.classList.add(className),label;this._print_label_not_found(mesh)}setLabelPosition(mesh,position){const label=this.getLabel(mesh);if(label)return label.offset.copy(position),this.updatePosition(label),label;this._print_label_not_found(mesh)}setOffsetPosition(mesh,position){const label=this.getLabel(mesh);if(label)return label.offset.copy(position),this.updatePosition(label),label;this._print_label_not_found(mesh)}_print_label_not_found(mesh){}}function RayCast(graphics,physics){this.graphics=graphics,this.physics=physics,this.meshes=[],this.faces=[],this.raycaster=new THREE.Raycaster,this.mousePosition=new THREE.Vector2,window.addEventListener("mousemove",function(event){this.mousePosition.x=+event.clientX/this.graphics.renderer.domElement.clientWidth*2-1,this.mousePosition.y=-event.clientY/this.graphics.renderer.domElement.clientHeight*2+1}.bind(this),!1)}RayCast.prototype.doRaycast=function(){this.graphics.countMeshes()!==this.meshes.length&&(this.meshes=this.graphics.getMeshes(),this.faces=this.graphics.getFaces());var targets=[];if(this.faces.length>1){this.raycaster.setFromCamera(this.mousePosition,this.graphics.camera);let intersects=this.raycaster.intersectObjects(this.faces);for(let i=0;i<intersects.length;i++){const obj=intersects[i].object;obj.name.includes(Utils.HELPER.PREFIX)||obj.name.includes(Utils.BODYDEBUG.PREFIX)||(obj.parent instanceof THREE.Group?targets.push({mesh:obj.parent,intersect:intersects[i],ray:this.raycaster.ray}):targets.push({mesh:obj,intersect:intersects[i],ray:this.raycaster.ray}))}}return targets},RayCast.prototype.countMeshes=function(){var cnt=0;return this.graphics.scene.traverse(c=>{c instanceof THREE.Mesh&&c.name&&cnt++}),cnt};class AssetLoader{constructor(graphics,physics){this.graphics=graphics,this.physics=physics}load_org(model,callback){var self=this;return new Promise((resolve,reject)=>{console.group("%cAssetLoader.load","color:#22aa55");const loader=new GLTFLoader;loader.crossOrigin="anonymous",loader.load(model,gltf=>{Utils.print("The "+model+" is loaded","#22aa55");const colliders=[];var actor=void 0,cnt=0;console.group("%cProcessing Asset Model","color:#5588aa"),gltf.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&child.parent instanceof THREE.Scene&&(child.name.toLowerCase().includes("collider")?(colliders.push(child),Utils.printSuccess(++cnt+') Collider.name "'+child.name+'"')):(child.name.toLowerCase().includes("actor")||child.name.toLowerCase().includes("character"))&&((actor=child).children.forEach(c=>{c.castShadow=!0}),Utils.printInfo('Actor.name "'+child.name+'"')))}),console.groupEnd(),this.graphics.options.useReflection&&this.graphics.applyReflectionMap(actor),(!actor||colliders.length<1)&&Utils.printDanger("No actor or colliders are found in the "+model);const body=new CANNON.Body({mass:(Math.abs(actor.scale.x)+Math.abs(actor.scale.y)+Math.abs(actor.scale.z))/3});body.threemesh=actor,body.threemesh.name=actor.name;let totalMass=0;colliders.forEach(collider=>{collider.receiveShadow=!1,collider.castShadow=!1,collider.material=null;var shape=self.physics.createShapeFromMesh(collider,!0),p2=collider.position.clone().sub(actor.position);body.addShape(shape,p2),totalMass+=(Math.abs(collider.scale.x)+Math.abs(collider.scale.y)+Math.abs(collider.scale.z))/3/colliders.length}),body.mass+=totalMass,console.log("%cMass: "+body.mass,"color:#22aa55"),body.position.copy(actor.position),body.quaternion.copy(actor.quaternion),self.graphics.scene.add(actor),self.physics.world.addBody(body),console.groupEnd();let asset={body:body,mesh:actor,colliders:colliders};resolve(asset),callback&&callback(asset)})})}load(model,callback){return new Promise((resolve,reject)=>{const loader=new GLTFLoader;loader.crossOrigin="anonymous";const self=this;loader.load(model,gltf=>{const colliders=[];var actor=null;gltf.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&child.parent instanceof THREE.Scene&&(child.name.toLowerCase().includes("collider")?(child.receiveShadow=!1,child.castShadow=!1,child.material=null,child.visible=!1,colliders.push(child)):(child.name.toLowerCase().includes("actor")||child.name.toLowerCase().includes("character"))&&(actor=child,child.children.forEach(c=>{c.castShadow=!0,c.receiveShadow=!0,this.graphics.options.useReflection&&this.graphics.applyReflectionMap(c)})))}),actor||Utils.printDanger("No actor or colliders are found in the "+model),colliders.length<1&&Utils.printDanger("No actor or colliders are found in the "+model);const body=new CANNON.Body({mass:(Math.abs(actor.scale.x)+Math.abs(actor.scale.y)+Math.abs(actor.scale.z))/3});body.threemesh=actor,body.threemesh.name=actor.name;let totalMass=0;colliders.forEach(collider=>{var shape=self.physics.createShapeFromMesh(collider,!1),ofset=collider.position.clone().sub(actor.position);body.addShape(shape,ofset,collider.quaternion),totalMass+=(Math.abs(collider.scale.x)+Math.abs(collider.scale.y)+Math.abs(collider.scale.z))/3}),body.position.copy(actor.position),body.quaternion.copy(actor.quaternion),body.mass+=totalMass/colliders.length,console.log("%cMass: "+body.mass,"color:#22aa55"),self.graphics.scene.add(actor),self.physics.world.addBody(body);let asset={body:body,mesh:actor,colliders:colliders};resolve(asset),callback&&callback(asset)})})}copyAsset(src,clonedName){let actor;clonedName=clonedName||"",src.mesh instanceof THREE.Group?(actor=new THREE.Group,src.mesh.traverse(c=>{if(c instanceof THREE.Mesh){let mesh=new THREE.Mesh(c.geometry,c.material);mesh.name=c.name,mesh.position.copy(c.position),mesh.rotation.copy(c.rotation),mesh.quaternion.copy(c.quaternion),actor.add(mesh)}}),actor.name=clonedName,actor.position.copy(src.mesh.position),actor.rotation.copy(src.mesh.rotation),actor.scale.copy(src.mesh.scale),actor.quaternion.copy(src.mesh.quaternion)):((actor=new THREE.Mesh(src.mesh.geometry,src.mesh.material)).name=clonedName,actor.position.copy(src.mesh.position),actor.rotation.copy(src.mesh.rotation),actor.scale.copy(src.mesh.scale),actor.quaternion.copy(src.mesh.quaternion));let colliders=src.colliders,body=new CANNON.Body({mass:src.body.mass});body.threemesh=actor;const self=this;return colliders.forEach(collider=>{let shape=self.physics.createShapeFromMesh(collider,!0),v2=collider.position.clone().sub(actor.position);body.addShape(shape,v2)}),body.position.copy(actor.position),body.quaternion.copy(actor.quaternion),self.graphics.scene.add(actor),self.physics.world.addBody(body),{body:body,mesh:actor,colliders:colliders}}loadComplex(model,callback){var self=this;return new Promise((resolve,reject)=>{console.group("%cAssetLoader.loadComplex","color:#22aa55");const loader=new GLTFLoader;loader.crossOrigin="anonymous",loader.load(model,gltf=>{Utils.print("The "+model+" is loaded","#22aa55");const colliders=[];var actor=void 0,cnt=0;if(console.group('%cProcessing Asset Model "'+model+'"',"color:#5588aa"),gltf.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&child.parent instanceof THREE.Scene&&(child.name.toLowerCase().includes("collider")?(colliders.push(child),Utils.printSuccess(++cnt+') Collider.name "'+child.name+'"')):(child.name.toLowerCase().includes("actor")||child.name.toLowerCase().includes("character"))&&((actor=child).children.forEach(c=>{c.castShadow=!0}),Utils.printInfo('Actor.name "'+child.name+'"')))}),console.groupEnd(),this.graphics.options.useReflection&&this.graphics.applyReflectionMap(actor),!actor)throw"AssetLoader.loadComplex: Actor is not found in the "+model;if(colliders.length<1)throw"AssetLoader.loadComplex : Colliders are not found in the "+model;const body=new CANNON.Body({mass:(Math.abs(actor.scale.x)+Math.abs(actor.scale.y)+Math.abs(actor.scale.z))/3});body.threemesh=actor,body.threemesh.name=actor.name,body.position.copy(actor.position),body.quaternion.copy(actor.quaternion),self.graphics.scene.add(actor),self.physics.world.addBody(body);let colliderBodies=[],constraints=[],totalMass=0;colliders.forEach(collider=>{collider.receiveShadow=!1,collider.castShadow=!1,collider.material=null;let col=self.physics.createBodyFromMesh(collider);col.fixedRotation=!0,col.updateMassProperties(),colliderBodies.push(col),self.physics.world.addBody(col);let con=new CANNON.LockConstraint(body,col,.5);constraints.push(con),self.physics.world.addConstraint(con),totalMass+=col.mass/colliders.length}),body.mass+=totalMass,console.log("%cMass: "+body.mass,"color:#22aa55"),console.groupEnd();let asset={body:body,mesh:actor,colliders:colliders,colliderBodies:colliderBodies,constraints:constraints};resolve(asset),callback&&callback(asset)})})}loadVihicle(model,callback){return new Promise((resolve,reject)=>{const VihicleParts=[],self=this,loader=new GLTFLoader;loader.crossOrigin="anonymous",console.group("Load Vihicle"),console.log("Vihicle is loading..."),loader.load(model,gltf=>{gltf.scene.traverse(child=>{let name=child.name.toLowerCase();(name.includes("actor")||name.includes("mesh"))&&VihicleParts.push({mesh:child,body:null,colliders:[]})});for(let i=0;i<VihicleParts.length;i++){let actor=VihicleParts[i];actor.mesh.children.forEach(child=>{child.name.toLowerCase().includes("collider")&&child.parent===actor.mesh?(child.receiveShadow=!1,child.castShadow=!1,child.material=null,child.visible=!1,actor.colliders.push(child)):(child.receiveShadow=!0,child.castShadow=!0)})}for(let i=0;i<VihicleParts.length;i++){let actor=VihicleParts[i],mesh=actor.mesh;actor.body=new CANNON.Body({mass:(Math.abs(mesh.scale.x)+Math.abs(mesh.scale.y)+Math.abs(mesh.scale.z))/3}),actor.body.threemesh=mesh,actor.body.threemesh.name=mesh.name}const physics=self.physics,graphics=self.graphics;for(let i=0;i<VihicleParts.length;i++){let actor=VihicleParts[i],mesh=actor.mesh,body=actor.body,totalMass=0;actor.mesh.children.forEach(collider=>{if(collider.name.toLowerCase().includes("collider")&&collider.parent===mesh){var shape=physics.createShapeFromMesh(collider,!1),ofset=collider.position.clone().sub(mesh.position);body.addShape(shape,ofset,collider.quaternion),totalMass+=(Math.abs(collider.scale.x)+Math.abs(collider.scale.y)+Math.abs(collider.scale.z))/3}}),body.position.copy(mesh.position),body.quaternion.copy(mesh.quaternion),body.mass=totalMass,graphics.scene.add(mesh),physics.world.addBody(body)}console.log("Vihicle is loaded"),console.groupEnd(),resolve(VihicleParts),callback&&callback(VihicleParts)})})}}var SPE={distributions:{BOX:1,SPHERE:2,DISC:3},valueOverLifetimeLength:4};function Animator(modelName,engine,initCallback,fileFormat){this.engine=engine,this.mixer=null,this.clipActions=[],this.character,this.animationClips=[],this.fileFormat=fileFormat,"glb"!==this.fileFormat&&"gltf"!==this.fileFormat&&(this.fileFormat="glb"),this.modelName=modelName;const TARGET_MODEL=`models/animations/toon/characters_and_animations/${modelName}/${modelName}.${this.fileFormat}`;console.log(`%c${modelName}.${this.fileFormat} is loading...`,"color: green"),this.engine.loadModel(TARGET_MODEL).then(gltf=>{console.log(`%c${modelName}.${this.fileFormat} is loaded`,"color: green"),gltf.animations.forEach(anim=>{engine.printInfo('"'+gltf.scene.name+'" : '+anim.name),this.animationClips.push(anim)}),this.character=gltf.scene;const name=this.character.name.split("_")[2];engine.printInfo(`"${name}" is loaded`),this.mixer=new THREE.AnimationMixer(this.character),this.animationClips.forEach(ac=>{this.clipActions.push(this.mixer.clipAction(ac))}),this.animationClips.length<1?console.warn("There is no animation of the loaded model"):(this.clipActions[0].play(),initCallback&&initCallback(this))})}function EngineCore(options){Utils.printInfo(EngineCore.VERSION),this.options=options||{},this.defaultOptions=Options,this.callback=void 0,this.reqAnim=void 0,this.services=[],this.properties={frameCount:0,timing:{deltaTime:1/60,currentTime:0,previousTime:0,processingTime:0},graphics:{processingTime:0},physics:{processingTime:0}},this.graphics=void 0,this.physics=void 0,this.keyboard=void 0,this.labelRenderer=void 0,this.raycaster=void 0,this.assetLoader=void 0}SPE.TypedArrayHelper=function(TypedArrayConstructor,size,componentSize,indexOffset){this.componentSize=componentSize||1,this.size=size||1,this.TypedArrayConstructor=TypedArrayConstructor||Float32Array,this.array=new TypedArrayConstructor(size*this.componentSize),this.indexOffset=indexOffset||0},SPE.TypedArrayHelper.constructor=SPE.TypedArrayHelper,SPE.TypedArrayHelper.prototype.setSize=function(size,noComponentMultiply){var currentArraySize=this.array.length;return noComponentMultiply||(size*=this.componentSize),size<currentArraySize?this.shrink(size):size>currentArraySize?this.grow(size):void console.info("TypedArray is already of size:",size+".","Will not resize.")},SPE.TypedArrayHelper.prototype.shrink=function(size){return this.array=this.array.subarray(0,size),this.size=size,this},SPE.TypedArrayHelper.prototype.grow=function(size){var existingArray=this.array,newArray=new this.TypedArrayConstructor(size);return newArray.set(existingArray),this.array=newArray,this.size=size,this},SPE.TypedArrayHelper.prototype.splice=function(start,end){start*=this.componentSize,end*=this.componentSize;for(var data=[],array=this.array,size=array.length,i=0;i<size;++i)(i<start||i>=end)&&data.push(array[i]);return this.setFromArray(0,data),this},SPE.TypedArrayHelper.prototype.setFromArray=function(index,array){var newSize=index+array.length;return newSize>this.array.length?this.grow(newSize):newSize<this.array.length&&this.shrink(newSize),this.array.set(array,this.indexOffset+index),this},SPE.TypedArrayHelper.prototype.setVec2=function(index,vec2){return this.setVec2Components(index,vec2.x,vec2.y)},SPE.TypedArrayHelper.prototype.setVec2Components=function(index,x,y){var array=this.array,i=this.indexOffset+index*this.componentSize;return array[i]=x,array[i+1]=y,this},SPE.TypedArrayHelper.prototype.setVec3=function(index,vec3){return this.setVec3Components(index,vec3.x,vec3.y,vec3.z)},SPE.TypedArrayHelper.prototype.setVec3Components=function(index,x,y,z){var array=this.array,i=this.indexOffset+index*this.componentSize;return array[i]=x,array[i+1]=y,array[i+2]=z,this},SPE.TypedArrayHelper.prototype.setVec4=function(index,vec4){return this.setVec4Components(index,vec4.x,vec4.y,vec4.z,vec4.w)},SPE.TypedArrayHelper.prototype.setVec4Components=function(index,x,y,z,w){var array=this.array,i=this.indexOffset+index*this.componentSize;return array[i]=x,array[i+1]=y,array[i+2]=z,array[i+3]=w,this},SPE.TypedArrayHelper.prototype.setMat3=function(index,mat3){return this.setFromArray(this.indexOffset+index*this.componentSize,mat3.elements)},SPE.TypedArrayHelper.prototype.setMat4=function(index,mat4){return this.setFromArray(this.indexOffset+index*this.componentSize,mat4.elements)},SPE.TypedArrayHelper.prototype.setColor=function(index,color){return this.setVec3Components(index,color.r,color.g,color.b)},SPE.TypedArrayHelper.prototype.setNumber=function(index,numericValue){return this.array[this.indexOffset+index*this.componentSize]=numericValue,this},SPE.TypedArrayHelper.prototype.getValueAtIndex=function(index){return this.array[this.indexOffset+index]},SPE.TypedArrayHelper.prototype.getComponentValueAtIndex=function(index){return this.array.subarray(this.indexOffset+index*this.componentSize)},SPE.ShaderAttribute=function(type,dynamicBuffer,arrayType){var typeMap=SPE.ShaderAttribute.typeSizeMap;this.type="string"==typeof type&&typeMap.hasOwnProperty(type)?type:"f",this.componentSize=typeMap[this.type],this.arrayType=arrayType||Float32Array,this.typedArray=null,this.bufferAttribute=null,this.dynamicBuffer=!!dynamicBuffer,this.updateMin=0,this.updateMax=0},SPE.ShaderAttribute.constructor=SPE.ShaderAttribute,SPE.ShaderAttribute.typeSizeMap={f:1,v2:2,v3:3,v4:4,c:3,m3:9,m4:16},SPE.ShaderAttribute.prototype.setUpdateRange=function(min,max){this.updateMin=Math.min(min*this.componentSize,this.updateMin*this.componentSize),this.updateMax=Math.max(max*this.componentSize,this.updateMax*this.componentSize)},SPE.ShaderAttribute.prototype.flagUpdate=function(){var attr=this.bufferAttribute,range=attr.updateRange;range.offset=this.updateMin,range.count=Math.min(this.updateMax-this.updateMin+this.componentSize,this.typedArray.array.length),attr.needsUpdate=!0},SPE.ShaderAttribute.prototype.resetUpdateRange=function(){this.updateMin=0,this.updateMax=0},SPE.ShaderAttribute.prototype.resetDynamic=function(){this.bufferAttribute.dynamic=this.dynamicBuffer},SPE.ShaderAttribute.prototype.splice=function(start,end){this.typedArray.splice(start,end),this.forceUpdateAll()},SPE.ShaderAttribute.prototype.forceUpdateAll=function(){this.bufferAttribute.array=this.typedArray.array,this.bufferAttribute.updateRange.offset=0,this.bufferAttribute.updateRange.count=-1,this.bufferAttribute.dynamic=!1,this.bufferAttribute.needsUpdate=!0},SPE.ShaderAttribute.prototype._ensureTypedArray=function(size){null!==this.typedArray&&this.typedArray.size===size*this.componentSize||(null!==this.typedArray&&this.typedArray.size!==size?this.typedArray.setSize(size):null===this.typedArray&&(this.typedArray=new SPE.TypedArrayHelper(this.arrayType,size,this.componentSize)))},SPE.ShaderAttribute.prototype._createBufferAttribute=function(size){if(this._ensureTypedArray(size),null!==this.bufferAttribute)return this.bufferAttribute.array=this.typedArray.array,parseFloat(THREE.REVISION)>=81&&(this.bufferAttribute.count=this.bufferAttribute.array.length/this.bufferAttribute.itemSize),void(this.bufferAttribute.needsUpdate=!0);this.bufferAttribute=new THREE.BufferAttribute(this.typedArray.array,this.componentSize),this.bufferAttribute.dynamic=this.dynamicBuffer},SPE.ShaderAttribute.prototype.getLength=function(){return null===this.typedArray?0:this.typedArray.array.length},SPE.shaderChunks={defines:["#define PACKED_COLOR_SIZE 256.0","#define PACKED_COLOR_DIVISOR 255.0"].join("\n"),uniforms:["uniform float deltaTime;","uniform float runTime;","uniform sampler2D texture;","uniform vec4 textureAnimation;","uniform float scale;"].join("\n"),attributes:["attribute vec4 acceleration;","attribute vec3 velocity;","attribute vec4 rotation;","attribute vec3 rotationCenter;","attribute vec4 params;","attribute vec4 size;","attribute vec4 angle;","attribute vec4 color;","attribute vec4 opacity;"].join("\n"),varyings:["varying vec4 vColor;","#ifdef SHOULD_ROTATE_TEXTURE","    varying float vAngle;","#endif","#ifdef SHOULD_CALCULATE_SPRITE","    varying vec4 vSpriteSheet;","#endif"].join("\n"),branchAvoidanceFunctions:["float when_gt(float x, float y) {","    return max(sign(x - y), 0.0);","}","float when_lt(float x, float y) {","    return min( max(1.0 - sign(x - y), 0.0), 1.0 );","}","float when_eq( float x, float y ) {","    return 1.0 - abs( sign( x - y ) );","}","float when_ge(float x, float y) {","  return 1.0 - when_lt(x, y);","}","float when_le(float x, float y) {","  return 1.0 - when_gt(x, y);","}","float and(float a, float b) {","    return a * b;","}","float or(float a, float b) {","    return min(a + b, 1.0);","}"].join("\n"),unpackColor:["vec3 unpackColor( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   return c;","}"].join("\n"),unpackRotationAxis:["vec3 unpackRotationAxis( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   c *= vec3( 2.0 );","   c -= vec3( 1.0 );","   return c;","}"].join("\n"),floatOverLifetime:["float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {","    highp float value = 0.0;","    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );","    float fIndex = 0.0;","    float shouldApplyValue = 0.0;","    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );","","    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {","       fIndex = float( i );","       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );","       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );","    }","","    return value;","}"].join("\n"),colorOverLifetime:["vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {","    vec3 value = vec3( 0.0 );","    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );","    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );","    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );","    return value;","}"].join("\n"),paramFetchingFunctions:["float getAlive() {","   return params.x;","}","float getAge() {","   return params.y;","}","float getMaxAge() {","   return params.z;","}","float getWiggle() {","   return params.w;","}"].join("\n"),forceFetchingFunctions:["vec4 getPosition( in float age ) {","   return modelViewMatrix * vec4( position, 1.0 );","}","vec3 getVelocity( in float age ) {","   return velocity * age;","}","vec3 getAcceleration( in float age ) {","   return acceleration.xyz * age;","}"].join("\n"),rotationFunctions:["#ifdef SHOULD_ROTATE_PARTICLES","   mat4 getRotationMatrix( in vec3 axis, in float angle) {","       axis = normalize(axis);","       float s = sin(angle);","       float c = cos(angle);","       float oc = 1.0 - c;","","       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,","                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,","                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,","                   0.0,                                0.0,                                0.0,                                1.0);","   }","","   vec3 getRotation( in vec3 pos, in float positionInTime ) {","      if( rotation.y == 0.0 ) {","           return pos;","      }","","      vec3 axis = unpackRotationAxis( rotation.x );","      vec3 center = rotationCenter;","      vec3 translated;","      mat4 rotationMatrix;","      float angle = 0.0;","      angle += when_eq( rotation.z, 0.0 ) * rotation.y;","      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );","      translated = rotationCenter - pos;","      rotationMatrix = getRotationMatrix( axis, angle );","      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );","   }","#endif"].join("\n"),rotateTexture:["    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );","","    #ifdef SHOULD_ROTATE_TEXTURE","       float x = gl_PointCoord.x - 0.5;","       float y = 1.0 - gl_PointCoord.y - 0.5;","       float c = cos( -vAngle );","       float s = sin( -vAngle );","       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );","    #endif","","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = vSpriteSheet.x;","        float framesY = vSpriteSheet.y;","        float columnNorm = vSpriteSheet.z;","        float rowNorm = vSpriteSheet.w;","        vUv.x = gl_PointCoord.x * framesX + columnNorm;","        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);","    #endif","","    vec4 rotatedTexture = texture2D( texture, vUv );"].join("\n")},SPE.shaders={vertex:[SPE.shaderChunks.defines,SPE.shaderChunks.uniforms,SPE.shaderChunks.attributes,SPE.shaderChunks.varyings,THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_vertex,THREE.ShaderChunk.fog_pars_vertex,SPE.shaderChunks.branchAvoidanceFunctions,SPE.shaderChunks.unpackColor,SPE.shaderChunks.unpackRotationAxis,SPE.shaderChunks.floatOverLifetime,SPE.shaderChunks.colorOverLifetime,SPE.shaderChunks.paramFetchingFunctions,SPE.shaderChunks.forceFetchingFunctions,SPE.shaderChunks.rotationFunctions,"void main() {","    highp float age = getAge();","    highp float alive = getAlive();","    highp float maxAge = getMaxAge();","    highp float positionInTime = (age / maxAge);","    highp float isAlive = when_gt( alive, 0.0 );","    #ifdef SHOULD_WIGGLE_PARTICLES","        float wiggleAmount = positionInTime * getWiggle();","        float wiggleSin = isAlive * sin( wiggleAmount );","        float wiggleCos = isAlive * cos( wiggleAmount );","    #endif","    vec3 vel = getVelocity( age );","    vec3 accel = getAcceleration( age );","    vec3 force = vec3( 0.0 );","    vec3 pos = vec3( position );","    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;","    force += vel;","    force *= drag;","    force += accel * age;","    pos += force;","    #ifdef SHOULD_WIGGLE_PARTICLES","        pos.x += wiggleSin;","        pos.y += wiggleCos;","        pos.z += wiggleSin;","    #endif","    #ifdef SHOULD_ROTATE_PARTICLES","        pos = getRotation( pos, positionInTime );","    #endif","    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );","    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;","    #ifdef HAS_PERSPECTIVE","        float perspective = scale / length( mvPosition.xyz );","    #else","        float perspective = 1.0;","    #endif","    float pointSizePerspective = pointSize * perspective;","    #ifdef COLORIZE","       vec3 c = isAlive * getColorOverLifetime(","           positionInTime,","           unpackColor( color.x ),","           unpackColor( color.y ),","           unpackColor( color.z ),","           unpackColor( color.w )","       );","    #else","       vec3 c = vec3(1.0);","    #endif","    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );","    vColor = vec4( c, o );","    #ifdef SHOULD_ROTATE_TEXTURE","        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );","    #endif","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = textureAnimation.x;","        float framesY = textureAnimation.y;","        float loopCount = textureAnimation.w;","        float totalFrames = textureAnimation.z;","        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );","        float column = floor(mod( frameNumber, framesX ));","        float row = floor( (frameNumber - column) / framesX );","        float columnNorm = column / framesX;","        float rowNorm = row / framesY;","        vSpriteSheet.x = 1.0 / framesX;","        vSpriteSheet.y = 1.0 / framesY;","        vSpriteSheet.z = columnNorm;","        vSpriteSheet.w = rowNorm;","    #endif","    gl_PointSize = pointSizePerspective;","    gl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.fog_vertex,"}"].join("\n"),fragment:[SPE.shaderChunks.uniforms,THREE.ShaderChunk.common,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,SPE.shaderChunks.varyings,SPE.shaderChunks.branchAvoidanceFunctions,"void main() {","    vec3 outgoingLight = vColor.xyz;","    ","    #ifdef ALPHATEST","       if ( vColor.w < float(ALPHATEST) ) discard;","    #endif",SPE.shaderChunks.rotateTexture,THREE.ShaderChunk.logdepthbuf_fragment,"    outgoingLight = vColor.xyz * rotatedTexture.xyz;","    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );",THREE.ShaderChunk.fog_fragment,"}"].join("\n")},SPE.utils={types:{BOOLEAN:"boolean",STRING:"string",NUMBER:"number",OBJECT:"object"},ensureTypedArg:function(arg,type,defaultValue){return typeof arg===type?arg:defaultValue},ensureArrayTypedArg:function(arg,type,defaultValue){if(Array.isArray(arg)){for(var i=arg.length-1;i>=0;--i)if(typeof arg[i]!==type)return defaultValue;return arg}return this.ensureTypedArg(arg,type,defaultValue)},ensureInstanceOf:function(arg,instance,defaultValue){return void 0!==instance&&arg instanceof instance?arg:defaultValue},ensureArrayInstanceOf:function(arg,instance,defaultValue){if(Array.isArray(arg)){for(var i=arg.length-1;i>=0;--i)if(void 0!==instance&&arg[i]instanceof instance==!1)return defaultValue;return arg}return this.ensureInstanceOf(arg,instance,defaultValue)},ensureValueOverLifetimeCompliance:function(property,minLength,maxLength){minLength=minLength||3,maxLength=maxLength||3,!1===Array.isArray(property._value)&&(property._value=[property._value]),!1===Array.isArray(property._spread)&&(property._spread=[property._spread]);var valueLength=this.clamp(property._value.length,minLength,maxLength),spreadLength=this.clamp(property._spread.length,minLength,maxLength),desiredLength=Math.max(valueLength,spreadLength);property._value.length!==desiredLength&&(property._value=this.interpolateArray(property._value,desiredLength)),property._spread.length!==desiredLength&&(property._spread=this.interpolateArray(property._spread,desiredLength))},interpolateArray:function(srcArray,newLength){for(var sourceLength=srcArray.length,newArray=["function"==typeof srcArray[0].clone?srcArray[0].clone():srcArray[0]],factor=(sourceLength-1)/(newLength-1),i=1;i<newLength-1;++i){var f=i*factor,before=Math.floor(f),after=Math.ceil(f),delta=f-before;newArray[i]=this.lerpTypeAgnostic(srcArray[before],srcArray[after],delta)}return newArray.push("function"==typeof srcArray[sourceLength-1].clone?srcArray[sourceLength-1].clone():srcArray[sourceLength-1]),newArray},clamp:function(value,min,max){return Math.max(min,Math.min(value,max))},zeroToEpsilon:function(value,randomise){var result=value;return result=randomise?1e-5*Math.random()*10:1e-5,value<0&&value>-1e-5&&(result=-result),result},lerpTypeAgnostic:function(start,end,delta){var out,types=this.types;return typeof start===types.NUMBER&&typeof end===types.NUMBER?start+(end-start)*delta:start instanceof THREE.Vector2&&end instanceof THREE.Vector2?((out=start.clone()).x=this.lerp(start.x,end.x,delta),out.y=this.lerp(start.y,end.y,delta),out):start instanceof THREE.Vector3&&end instanceof THREE.Vector3?((out=start.clone()).x=this.lerp(start.x,end.x,delta),out.y=this.lerp(start.y,end.y,delta),out.z=this.lerp(start.z,end.z,delta),out):start instanceof THREE.Vector4&&end instanceof THREE.Vector4?((out=start.clone()).x=this.lerp(start.x,end.x,delta),out.y=this.lerp(start.y,end.y,delta),out.z=this.lerp(start.z,end.z,delta),out.w=this.lerp(start.w,end.w,delta),out):start instanceof THREE.Color&&end instanceof THREE.Color?((out=start.clone()).r=this.lerp(start.r,end.r,delta),out.g=this.lerp(start.g,end.g,delta),out.b=this.lerp(start.b,end.b,delta),out):void console.warn("Invalid argument types, or argument types do not match:",start,end)},lerp:function(start,end,delta){return start+(end-start)*delta},roundToNearestMultiple:function(n,multiple){var remainder;return 0===multiple?n:0===(remainder=Math.abs(n)%multiple)?n:n<0?-(Math.abs(n)-remainder):n+multiple-remainder},arrayValuesAreEqual:function(array){for(var i=0;i<array.length-1;++i)if(array[i]!==array[i+1])return!1;return!0},randomFloat:function(base,spread){return base+spread*(Math.random()-.5)},randomVector3:function(attribute,index,base,spread,spreadClamp){var x=base.x+(Math.random()*spread.x-.5*spread.x),y=base.y+(Math.random()*spread.y-.5*spread.y),z=base.z+(Math.random()*spread.z-.5*spread.z);spreadClamp&&(x=.5*-spreadClamp.x+this.roundToNearestMultiple(x,spreadClamp.x),y=.5*-spreadClamp.y+this.roundToNearestMultiple(y,spreadClamp.y),z=.5*-spreadClamp.z+this.roundToNearestMultiple(z,spreadClamp.z)),attribute.typedArray.setVec3Components(index,x,y,z)},randomColor:function(attribute,index,base,spread){var r=base.r+Math.random()*spread.x,g=base.g+Math.random()*spread.y,b=base.b+Math.random()*spread.z;r=this.clamp(r,0,1),g=this.clamp(g,0,1),b=this.clamp(b,0,1),attribute.typedArray.setVec3Components(index,r,g,b)},randomColorAsHex:function(){var workingColor=new THREE.Color;return function(attribute,index,base,spread){for(var numItems=base.length,colors=[],i=0;i<numItems;++i){var spreadVector=spread[i];workingColor.copy(base[i]),workingColor.r+=Math.random()*spreadVector.x-.5*spreadVector.x,workingColor.g+=Math.random()*spreadVector.y-.5*spreadVector.y,workingColor.b+=Math.random()*spreadVector.z-.5*spreadVector.z,workingColor.r=this.clamp(workingColor.r,0,1),workingColor.g=this.clamp(workingColor.g,0,1),workingColor.b=this.clamp(workingColor.b,0,1),colors.push(workingColor.getHex())}attribute.typedArray.setVec4Components(index,colors[0],colors[1],colors[2],colors[3])}}(),randomVector3OnSphere:function(attribute,index,base,radius,radiusSpread,radiusScale,radiusSpreadClamp,distributionClamp){var depth=2*Math.random()-1,t=6.2832*Math.random(),r=Math.sqrt(1-depth*depth),rand=this.randomFloat(radius,radiusSpread),x=0,y=0,z=0;radiusSpreadClamp&&(rand=Math.round(rand/radiusSpreadClamp)*radiusSpreadClamp),x=r*Math.cos(t)*rand,y=r*Math.sin(t)*rand,z=depth*rand,x*=radiusScale.x,y*=radiusScale.y,z*=radiusScale.z,x+=base.x,y+=base.y,z+=base.z,attribute.typedArray.setVec3Components(index,x,y,z)},seededRandom:function(seed){var x=1e4*Math.sin(seed);return x-(0|x)},randomVector3OnDisc:function(attribute,index,base,radius,radiusSpread,radiusScale,radiusSpreadClamp){var t=6.2832*Math.random(),rand=Math.abs(this.randomFloat(radius,radiusSpread)),x=0,y=0,z=0;radiusSpreadClamp&&(rand=Math.round(rand/radiusSpreadClamp)*radiusSpreadClamp),x=Math.cos(t)*rand,y=Math.sin(t)*rand,x*=radiusScale.x,y*=radiusScale.y,x+=base.x,y+=base.y,z+=base.z,attribute.typedArray.setVec3Components(index,x,y,z)},randomDirectionVector3OnSphere:function(){var v=new THREE.Vector3;return function(attribute,index,posX,posY,posZ,emitterPosition,speed,speedSpread){v.copy(emitterPosition),v.x-=posX,v.y-=posY,v.z-=posZ,v.normalize().multiplyScalar(-this.randomFloat(speed,speedSpread)),attribute.typedArray.setVec3Components(index,v.x,v.y,v.z)}}(),randomDirectionVector3OnDisc:function(){var v=new THREE.Vector3;return function(attribute,index,posX,posY,posZ,emitterPosition,speed,speedSpread){v.copy(emitterPosition),v.x-=posX,v.y-=posY,v.z-=posZ,v.normalize().multiplyScalar(-this.randomFloat(speed,speedSpread)),attribute.typedArray.setVec3Components(index,v.x,v.y,0)}}(),getPackedRotationAxis:function(){var v=new THREE.Vector3,vSpread=new THREE.Vector3,c=new THREE.Color,addOne=new THREE.Vector3(1,1,1);return function(axis,axisSpread){return v.copy(axis).normalize(),vSpread.copy(axisSpread).normalize(),v.x+=.5*-axisSpread.x+Math.random()*axisSpread.x,v.y+=.5*-axisSpread.y+Math.random()*axisSpread.y,v.z+=.5*-axisSpread.z+Math.random()*axisSpread.z,v.normalize().add(addOne).multiplyScalar(.5),c.setRGB(v.x,v.y,v.z),c.getHex()}}()},SPE.Group=function(options){var utils=SPE.utils,types=utils.types;(options=utils.ensureTypedArg(options,types.OBJECT,{})).texture=utils.ensureTypedArg(options.texture,types.OBJECT,{}),this.uuid=THREE.Math.generateUUID(),this.fixedTimeStep=utils.ensureTypedArg(options.fixedTimeStep,types.NUMBER,.016),this.texture=utils.ensureInstanceOf(options.texture.value,THREE.Texture,null),this.textureFrames=utils.ensureInstanceOf(options.texture.frames,THREE.Vector2,new THREE.Vector2(1,1)),this.textureFrameCount=utils.ensureTypedArg(options.texture.frameCount,types.NUMBER,this.textureFrames.x*this.textureFrames.y),this.textureLoop=utils.ensureTypedArg(options.texture.loop,types.NUMBER,1),this.textureFrames.max(new THREE.Vector2(1,1)),this.hasPerspective=utils.ensureTypedArg(options.hasPerspective,types.BOOLEAN,!0),this.colorize=utils.ensureTypedArg(options.colorize,types.BOOLEAN,!0),this.maxParticleCount=utils.ensureTypedArg(options.maxParticleCount,types.NUMBER,null),this.blending=utils.ensureTypedArg(options.blending,types.NUMBER,THREE.AdditiveBlending),this.transparent=utils.ensureTypedArg(options.transparent,types.BOOLEAN,!0),this.alphaTest=parseFloat(utils.ensureTypedArg(options.alphaTest,types.NUMBER,0)),this.depthWrite=utils.ensureTypedArg(options.depthWrite,types.BOOLEAN,!1),this.depthTest=utils.ensureTypedArg(options.depthTest,types.BOOLEAN,!0),this.fog=utils.ensureTypedArg(options.fog,types.BOOLEAN,!0),this.scale=utils.ensureTypedArg(options.scale,types.NUMBER,300),this.emitters=[],this.emitterIDs=[],this._pool=[],this._poolCreationSettings=null,this._createNewWhenPoolEmpty=0,this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!1,this.particleCount=0,this.uniforms={texture:{type:"t",value:this.texture},textureAnimation:{type:"v4",value:new THREE.Vector4(this.textureFrames.x,this.textureFrames.y,this.textureFrameCount,Math.max(Math.abs(this.textureLoop),1))},fogColor:{type:"c",value:null},fogNear:{type:"f",value:10},fogFar:{type:"f",value:200},fogDensity:{type:"f",value:.5},deltaTime:{type:"f",value:0},runTime:{type:"f",value:0},scale:{type:"f",value:this.scale}},this.defines={HAS_PERSPECTIVE:this.hasPerspective,COLORIZE:this.colorize,VALUE_OVER_LIFETIME_LENGTH:SPE.valueOverLifetimeLength,SHOULD_ROTATE_TEXTURE:!1,SHOULD_ROTATE_PARTICLES:!1,SHOULD_WIGGLE_PARTICLES:!1,SHOULD_CALCULATE_SPRITE:this.textureFrames.x>1||this.textureFrames.y>1},this.attributes={position:new SPE.ShaderAttribute("v3",!0),acceleration:new SPE.ShaderAttribute("v4",!0),velocity:new SPE.ShaderAttribute("v3",!0),rotation:new SPE.ShaderAttribute("v4",!0),rotationCenter:new SPE.ShaderAttribute("v3",!0),params:new SPE.ShaderAttribute("v4",!0),size:new SPE.ShaderAttribute("v4",!0),angle:new SPE.ShaderAttribute("v4",!0),color:new SPE.ShaderAttribute("v4",!0),opacity:new SPE.ShaderAttribute("v4",!0)},this.attributeKeys=Object.keys(this.attributes),this.attributeCount=this.attributeKeys.length,this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:SPE.shaders.vertex,fragmentShader:SPE.shaders.fragment,blending:this.blending,transparent:this.transparent,alphaTest:this.alphaTest,depthWrite:this.depthWrite,depthTest:this.depthTest,defines:this.defines,fog:this.fog}),this.geometry=new THREE.BufferGeometry,this.mesh=new THREE.Points(this.geometry,this.material),null===this.maxParticleCount&&console.warn("SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.")},SPE.Group.constructor=SPE.Group,SPE.Group.prototype._updateDefines=function(){for(var emitter,emitters=this.emitters,i=emitters.length-1,defines=this.defines;i>=0;--i)emitter=emitters[i],defines.SHOULD_CALCULATE_SPRITE||(defines.SHOULD_ROTATE_TEXTURE=defines.SHOULD_ROTATE_TEXTURE||!!Math.max(Math.max.apply(null,emitter.angle.value),Math.max.apply(null,emitter.angle.spread))),defines.SHOULD_ROTATE_PARTICLES=defines.SHOULD_ROTATE_PARTICLES||!!Math.max(emitter.rotation.angle,emitter.rotation.angleSpread),defines.SHOULD_WIGGLE_PARTICLES=defines.SHOULD_WIGGLE_PARTICLES||!!Math.max(emitter.wiggle.value,emitter.wiggle.spread);this.material.needsUpdate=!0},SPE.Group.prototype._applyAttributesToGeometry=function(){var attribute,geometryAttribute,attributes=this.attributes,geometry=this.geometry,geometryAttributes=geometry.attributes;for(var attr in attributes)attributes.hasOwnProperty(attr)&&(attribute=attributes[attr],(geometryAttribute=geometryAttributes[attr])?geometryAttribute.array=attribute.typedArray.array:geometry.addAttribute(attr,attribute.bufferAttribute),attribute.bufferAttribute.needsUpdate=!0);this.geometry.setDrawRange(0,this.particleCount)},SPE.Group.prototype.addEmitter=function(emitter){if(emitter instanceof SPE.Emitter!=!1)if(this.emitterIDs.indexOf(emitter.uuid)>-1)console.error("Emitter already exists in this group. Will not add again.");else{if(null===emitter.group){var attributes=this.attributes,start=this.particleCount,end=start+emitter.particleCount;for(var attr in this.particleCount=end,null!==this.maxParticleCount&&this.particleCount>this.maxParticleCount&&console.warn("SPE.Group: maxParticleCount exceeded. Requesting",this.particleCount,"particles, can support only",this.maxParticleCount),emitter._calculatePPSValue(emitter.maxAge._value+emitter.maxAge._spread),emitter._setBufferUpdateRanges(this.attributeKeys),emitter._setAttributeOffset(start),emitter.group=this,emitter.attributes=this.attributes,attributes)attributes.hasOwnProperty(attr)&&attributes[attr]._createBufferAttribute(null!==this.maxParticleCount?this.maxParticleCount:this.particleCount);for(var i=start;i<end;++i)emitter._assignPositionValue(i),emitter._assignForceValue(i,"velocity"),emitter._assignForceValue(i,"acceleration"),emitter._assignAbsLifetimeValue(i,"opacity"),emitter._assignAbsLifetimeValue(i,"size"),emitter._assignAngleValue(i),emitter._assignRotationValue(i),emitter._assignParamsValue(i),emitter._assignColorValue(i);return this._applyAttributesToGeometry(),this.emitters.push(emitter),this.emitterIDs.push(emitter.uuid),this._updateDefines(emitter),this.material.needsUpdate=!0,this.geometry.needsUpdate=!0,this._attributesNeedRefresh=!0,this}console.error("Emitter already belongs to another group. Will not add to requested group.")}else console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:",emitter)},SPE.Group.prototype.removeEmitter=function(emitter){var emitterIndex=this.emitterIDs.indexOf(emitter.uuid);if(emitter instanceof SPE.Emitter!=!1)if(-1!==emitterIndex){for(var start=emitter.attributeOffset,end=start+emitter.particleCount,params=this.attributes.params.typedArray,i=start;i<end;++i)params.array[4*i]=0,params.array[4*i+1]=0;for(var attr in this.emitters.splice(emitterIndex,1),this.emitterIDs.splice(emitterIndex,1),this.attributes)this.attributes.hasOwnProperty(attr)&&this.attributes[attr].splice(start,end);this.particleCount-=emitter.particleCount,emitter._onRemove(),this._attributesNeedRefresh=!0}else console.error("Emitter does not exist in this group. Will not remove.");else console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:",emitter)},SPE.Group.prototype.getFromPool=function(){var pool=this._pool,createNew=this._createNewWhenPoolEmpty;if(pool.length)return pool.pop();if(createNew){var emitter=new SPE.Emitter(this._poolCreationSettings);return this.addEmitter(emitter),emitter}return null},SPE.Group.prototype.releaseIntoPool=function(emitter){if(emitter instanceof SPE.Emitter!=!1)return emitter.reset(),this._pool.unshift(emitter),this;console.error("Argument is not instanceof SPE.Emitter:",emitter)},SPE.Group.prototype.getPool=function(){return this._pool},SPE.Group.prototype.addPool=function(numEmitters,emitterOptions,createNew){var emitter;this._poolCreationSettings=emitterOptions,this._createNewWhenPoolEmpty=!!createNew;for(var i=0;i<numEmitters;++i)emitter=Array.isArray(emitterOptions)?new SPE.Emitter(emitterOptions[i]):new SPE.Emitter(emitterOptions),this.addEmitter(emitter),this.releaseIntoPool(emitter);return this},SPE.Group.prototype._triggerSingleEmitter=function(pos){var emitter=this.getFromPool(),self=this;if(null!==emitter)return pos instanceof THREE.Vector3&&(emitter.position.value.copy(pos),emitter.position.value=emitter.position.value),emitter.enable(),setTimeout(function(){emitter.disable(),self.releaseIntoPool(emitter)},1e3*Math.max(emitter.duration,emitter.maxAge.value+emitter.maxAge.spread)),this;console.log("SPE.Group pool ran out.")},SPE.Group.prototype.triggerPoolEmitter=function(numEmitters,position){if("number"==typeof numEmitters&&numEmitters>1)for(var i=0;i<numEmitters;++i)this._triggerSingleEmitter(position);else this._triggerSingleEmitter(position);return this},SPE.Group.prototype._updateUniforms=function(dt){this.uniforms.runTime.value+=dt,this.uniforms.deltaTime.value=dt},SPE.Group.prototype._resetBufferRanges=function(){for(var keys=this.attributeKeys,i=this.attributeCount-1,attrs=this.attributes;i>=0;--i)attrs[keys[i]].resetUpdateRange()},SPE.Group.prototype._updateBuffers=function(emitter){for(var key,emitterAttr,attr,keys=this.attributeKeys,i=this.attributeCount-1,attrs=this.attributes,emitterRanges=emitter.bufferUpdateRanges;i>=0;--i)emitterAttr=emitterRanges[key=keys[i]],(attr=attrs[key]).setUpdateRange(emitterAttr.min,emitterAttr.max),attr.flagUpdate()},SPE.Group.prototype.tick=function(dt){var emitters=this.emitters,numEmitters=emitters.length,deltaTime=dt||this.fixedTimeStep,keys=this.attributeKeys,attrs=this.attributes;if(this._updateUniforms(deltaTime),this._resetBufferRanges(),0!==numEmitters||!1!==this._attributesNeedRefresh||!1!==this._attributesNeedDynamicReset){for(var emitter,i=0;i<numEmitters;++i)(emitter=emitters[i]).tick(deltaTime),this._updateBuffers(emitter);if(!0===this._attributesNeedDynamicReset){for(i=this.attributeCount-1;i>=0;--i)attrs[keys[i]].resetDynamic();this._attributesNeedDynamicReset=!1}if(!0===this._attributesNeedRefresh){for(i=this.attributeCount-1;i>=0;--i)attrs[keys[i]].forceUpdateAll();this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!0}}},SPE.Group.prototype.dispose=function(){return this.geometry.dispose(),this.material.dispose(),this},SPE.Emitter=function(options){var utils=SPE.utils,types=utils.types,lifetimeLength=SPE.valueOverLifetimeLength;for(var i in(options=utils.ensureTypedArg(options,types.OBJECT,{})).position=utils.ensureTypedArg(options.position,types.OBJECT,{}),options.velocity=utils.ensureTypedArg(options.velocity,types.OBJECT,{}),options.acceleration=utils.ensureTypedArg(options.acceleration,types.OBJECT,{}),options.radius=utils.ensureTypedArg(options.radius,types.OBJECT,{}),options.drag=utils.ensureTypedArg(options.drag,types.OBJECT,{}),options.rotation=utils.ensureTypedArg(options.rotation,types.OBJECT,{}),options.color=utils.ensureTypedArg(options.color,types.OBJECT,{}),options.opacity=utils.ensureTypedArg(options.opacity,types.OBJECT,{}),options.size=utils.ensureTypedArg(options.size,types.OBJECT,{}),options.angle=utils.ensureTypedArg(options.angle,types.OBJECT,{}),options.wiggle=utils.ensureTypedArg(options.wiggle,types.OBJECT,{}),options.maxAge=utils.ensureTypedArg(options.maxAge,types.OBJECT,{}),options.onParticleSpawn&&console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime."),this.uuid=THREE.Math.generateUUID(),this.type=utils.ensureTypedArg(options.type,types.NUMBER,SPE.distributions.BOX),this.position={_value:utils.ensureInstanceOf(options.position.value,THREE.Vector3,new THREE.Vector3),_spread:utils.ensureInstanceOf(options.position.spread,THREE.Vector3,new THREE.Vector3),_spreadClamp:utils.ensureInstanceOf(options.position.spreadClamp,THREE.Vector3,new THREE.Vector3),_distribution:utils.ensureTypedArg(options.position.distribution,types.NUMBER,this.type),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1),_radius:utils.ensureTypedArg(options.position.radius,types.NUMBER,10),_radiusScale:utils.ensureInstanceOf(options.position.radiusScale,THREE.Vector3,new THREE.Vector3(1,1,1)),_distributionClamp:utils.ensureTypedArg(options.position.distributionClamp,types.NUMBER,0)},this.velocity={_value:utils.ensureInstanceOf(options.velocity.value,THREE.Vector3,new THREE.Vector3),_spread:utils.ensureInstanceOf(options.velocity.spread,THREE.Vector3,new THREE.Vector3),_distribution:utils.ensureTypedArg(options.velocity.distribution,types.NUMBER,this.type),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.acceleration={_value:utils.ensureInstanceOf(options.acceleration.value,THREE.Vector3,new THREE.Vector3),_spread:utils.ensureInstanceOf(options.acceleration.spread,THREE.Vector3,new THREE.Vector3),_distribution:utils.ensureTypedArg(options.acceleration.distribution,types.NUMBER,this.type),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.drag={_value:utils.ensureTypedArg(options.drag.value,types.NUMBER,0),_spread:utils.ensureTypedArg(options.drag.spread,types.NUMBER,0),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.wiggle={_value:utils.ensureTypedArg(options.wiggle.value,types.NUMBER,0),_spread:utils.ensureTypedArg(options.wiggle.spread,types.NUMBER,0)},this.rotation={_axis:utils.ensureInstanceOf(options.rotation.axis,THREE.Vector3,new THREE.Vector3(0,1,0)),_axisSpread:utils.ensureInstanceOf(options.rotation.axisSpread,THREE.Vector3,new THREE.Vector3),_angle:utils.ensureTypedArg(options.rotation.angle,types.NUMBER,0),_angleSpread:utils.ensureTypedArg(options.rotation.angleSpread,types.NUMBER,0),_static:utils.ensureTypedArg(options.rotation.static,types.BOOLEAN,!1),_center:utils.ensureInstanceOf(options.rotation.center,THREE.Vector3,this.position._value.clone()),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.maxAge={_value:utils.ensureTypedArg(options.maxAge.value,types.NUMBER,2),_spread:utils.ensureTypedArg(options.maxAge.spread,types.NUMBER,0)},this.color={_value:utils.ensureArrayInstanceOf(options.color.value,THREE.Color,new THREE.Color),_spread:utils.ensureArrayInstanceOf(options.color.spread,THREE.Vector3,new THREE.Vector3),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.opacity={_value:utils.ensureArrayTypedArg(options.opacity.value,types.NUMBER,1),_spread:utils.ensureArrayTypedArg(options.opacity.spread,types.NUMBER,0),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.size={_value:utils.ensureArrayTypedArg(options.size.value,types.NUMBER,1),_spread:utils.ensureArrayTypedArg(options.size.spread,types.NUMBER,0),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.angle={_value:utils.ensureArrayTypedArg(options.angle.value,types.NUMBER,0),_spread:utils.ensureArrayTypedArg(options.angle.spread,types.NUMBER,0),_randomise:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)},this.particleCount=utils.ensureTypedArg(options.particleCount,types.NUMBER,100),this.duration=utils.ensureTypedArg(options.duration,types.NUMBER,null),this.isStatic=utils.ensureTypedArg(options.isStatic,types.BOOLEAN,!1),this.activeMultiplier=utils.ensureTypedArg(options.activeMultiplier,types.NUMBER,1),this.direction=utils.ensureTypedArg(options.direction,types.NUMBER,1),this.alive=utils.ensureTypedArg(options.alive,types.BOOLEAN,!0),this.particlesPerSecond=0,this.activationIndex=0,this.attributeOffset=0,this.attributeEnd=0,this.age=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.resetFlags={position:utils.ensureTypedArg(options.position.randomise,types.BOOLEAN,!1)||utils.ensureTypedArg(options.radius.randomise,types.BOOLEAN,!1),velocity:utils.ensureTypedArg(options.velocity.randomise,types.BOOLEAN,!1),acceleration:utils.ensureTypedArg(options.acceleration.randomise,types.BOOLEAN,!1)||utils.ensureTypedArg(options.drag.randomise,types.BOOLEAN,!1),rotation:utils.ensureTypedArg(options.rotation.randomise,types.BOOLEAN,!1),rotationCenter:utils.ensureTypedArg(options.rotation.randomise,types.BOOLEAN,!1),size:utils.ensureTypedArg(options.size.randomise,types.BOOLEAN,!1),color:utils.ensureTypedArg(options.color.randomise,types.BOOLEAN,!1),opacity:utils.ensureTypedArg(options.opacity.randomise,types.BOOLEAN,!1),angle:utils.ensureTypedArg(options.angle.randomise,types.BOOLEAN,!1)},this.updateFlags={},this.updateCounts={},this.updateMap={maxAge:"params",position:"position",velocity:"velocity",acceleration:"acceleration",drag:"acceleration",wiggle:"params",rotation:"rotation",size:"size",color:"color",opacity:"opacity",angle:"angle"},this.updateMap)this.updateMap.hasOwnProperty(i)&&(this.updateCounts[this.updateMap[i]]=0,this.updateFlags[this.updateMap[i]]=!1,this._createGetterSetters(this[i],i));this.bufferUpdateRanges={},this.attributeKeys=null,this.attributeCount=0,utils.ensureValueOverLifetimeCompliance(this.color,lifetimeLength,lifetimeLength),utils.ensureValueOverLifetimeCompliance(this.opacity,lifetimeLength,lifetimeLength),utils.ensureValueOverLifetimeCompliance(this.size,lifetimeLength,lifetimeLength),utils.ensureValueOverLifetimeCompliance(this.angle,lifetimeLength,lifetimeLength)},SPE.Emitter.constructor=SPE.Emitter,SPE.Emitter.prototype._createGetterSetters=function(propObj,propName){var self=this;for(var i in propObj)if(propObj.hasOwnProperty(i)){var name=i.replace("_","");Object.defineProperty(propObj,name,{get:function(prop){return function(){return this[prop]}}(i),set:function(prop){return function(value){var mapName=self.updateMap[propName],prevValue=this[prop],length=SPE.valueOverLifetimeLength;"_rotationCenter"===prop?(self.updateFlags.rotationCenter=!0,self.updateCounts.rotationCenter=0):"_randomise"===prop?self.resetFlags[mapName]=value:(self.updateFlags[mapName]=!0,self.updateCounts[mapName]=0),self.group._updateDefines(),this[prop]=value,Array.isArray(prevValue)&&SPE.utils.ensureValueOverLifetimeCompliance(self[propName],length,length)}}(i)})}},SPE.Emitter.prototype._setBufferUpdateRanges=function(keys){this.attributeKeys=keys,this.attributeCount=keys.length;for(var i=this.attributeCount-1;i>=0;--i)this.bufferUpdateRanges[keys[i]]={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY}},SPE.Emitter.prototype._calculatePPSValue=function(groupMaxAge){var particleCount=this.particleCount;this.duration?this.particlesPerSecond=particleCount/(groupMaxAge<this.duration?groupMaxAge:this.duration):this.particlesPerSecond=particleCount/groupMaxAge},SPE.Emitter.prototype._setAttributeOffset=function(startIndex){this.attributeOffset=startIndex,this.activationIndex=startIndex,this.activationEnd=startIndex+this.particleCount},SPE.Emitter.prototype._assignValue=function(prop,index){switch(prop){case"position":this._assignPositionValue(index);break;case"velocity":case"acceleration":this._assignForceValue(index,prop);break;case"size":case"opacity":this._assignAbsLifetimeValue(index,prop);break;case"angle":this._assignAngleValue(index);break;case"params":this._assignParamsValue(index);break;case"rotation":this._assignRotationValue(index);break;case"color":this._assignColorValue(index)}},SPE.Emitter.prototype._assignPositionValue=function(index){var distributions=SPE.distributions,utils=SPE.utils,prop=this.position,attr=this.attributes.position,value=prop._value,spread=prop._spread;switch(prop._distribution){case distributions.BOX:utils.randomVector3(attr,index,value,spread,prop._spreadClamp);break;case distributions.SPHERE:utils.randomVector3OnSphere(attr,index,value,prop._radius,prop._spread.x,prop._radiusScale,prop._spreadClamp.x,prop._distributionClamp||this.particleCount);break;case distributions.DISC:utils.randomVector3OnDisc(attr,index,value,prop._radius,prop._spread.x,prop._radiusScale,prop._spreadClamp.x)}},SPE.Emitter.prototype._assignForceValue=function(index,attrName){var pos,positionX,positionY,positionZ,i,distributions=SPE.distributions,utils=SPE.utils,prop=this[attrName],value=prop._value,spread=prop._spread;switch(prop._distribution){case distributions.BOX:utils.randomVector3(this.attributes[attrName],index,value,spread);break;case distributions.SPHERE:positionX=(pos=this.attributes.position.typedArray.array)[i=3*index],positionY=pos[i+1],positionZ=pos[i+2],utils.randomDirectionVector3OnSphere(this.attributes[attrName],index,positionX,positionY,positionZ,this.position._value,prop._value.x,prop._spread.x);break;case distributions.DISC:positionX=(pos=this.attributes.position.typedArray.array)[i=3*index],positionY=pos[i+1],positionZ=pos[i+2],utils.randomDirectionVector3OnDisc(this.attributes[attrName],index,positionX,positionY,positionZ,this.position._value,prop._value.x,prop._spread.x)}if("acceleration"===attrName){var drag=utils.clamp(utils.randomFloat(this.drag._value,this.drag._spread),0,1);this.attributes.acceleration.typedArray.array[4*index+3]=drag}},SPE.Emitter.prototype._assignAbsLifetimeValue=function(index,propName){var value,array=this.attributes[propName].typedArray,prop=this[propName],utils=SPE.utils;utils.arrayValuesAreEqual(prop._value)&&utils.arrayValuesAreEqual(prop._spread)?(value=Math.abs(utils.randomFloat(prop._value[0],prop._spread[0])),array.setVec4Components(index,value,value,value,value)):array.setVec4Components(index,Math.abs(utils.randomFloat(prop._value[0],prop._spread[0])),Math.abs(utils.randomFloat(prop._value[1],prop._spread[1])),Math.abs(utils.randomFloat(prop._value[2],prop._spread[2])),Math.abs(utils.randomFloat(prop._value[3],prop._spread[3])))},SPE.Emitter.prototype._assignAngleValue=function(index){var value,array=this.attributes.angle.typedArray,prop=this.angle,utils=SPE.utils;utils.arrayValuesAreEqual(prop._value)&&utils.arrayValuesAreEqual(prop._spread)?(value=utils.randomFloat(prop._value[0],prop._spread[0]),array.setVec4Components(index,value,value,value,value)):array.setVec4Components(index,utils.randomFloat(prop._value[0],prop._spread[0]),utils.randomFloat(prop._value[1],prop._spread[1]),utils.randomFloat(prop._value[2],prop._spread[2]),utils.randomFloat(prop._value[3],prop._spread[3]))},SPE.Emitter.prototype._assignParamsValue=function(index){this.attributes.params.typedArray.setVec4Components(index,this.isStatic?1:0,0,Math.abs(SPE.utils.randomFloat(this.maxAge._value,this.maxAge._spread)),SPE.utils.randomFloat(this.wiggle._value,this.wiggle._spread))},SPE.Emitter.prototype._assignRotationValue=function(index){this.attributes.rotation.typedArray.setVec3Components(index,SPE.utils.getPackedRotationAxis(this.rotation._axis,this.rotation._axisSpread),SPE.utils.randomFloat(this.rotation._angle,this.rotation._angleSpread),this.rotation._static?0:1),this.attributes.rotationCenter.typedArray.setVec3(index,this.rotation._center)},SPE.Emitter.prototype._assignColorValue=function(index){SPE.utils.randomColorAsHex(this.attributes.color,index,this.color._value,this.color._spread)},SPE.Emitter.prototype._resetParticle=function(index){for(var key,updateFlag,resetFlags=this.resetFlags,updateFlags=this.updateFlags,updateCounts=this.updateCounts,keys=this.attributeKeys,i=this.attributeCount-1;i>=0;--i)updateFlag=updateFlags[key=keys[i]],!0!==resetFlags[key]&&!0!==updateFlag||(this._assignValue(key,index),this._updateAttributeUpdateRange(key,index),!0===updateFlag&&updateCounts[key]===this.particleCount?(updateFlags[key]=!1,updateCounts[key]=0):1==updateFlag&&++updateCounts[key])},SPE.Emitter.prototype._updateAttributeUpdateRange=function(attr,i){var ranges=this.bufferUpdateRanges[attr];ranges.min=Math.min(i,ranges.min),ranges.max=Math.max(i,ranges.max)},SPE.Emitter.prototype._resetBufferRanges=function(){for(var key,ranges=this.bufferUpdateRanges,keys=this.bufferUpdateKeys,i=this.bufferUpdateCount-1;i>=0;--i)ranges[key=keys[i]].min=Number.POSITIVE_INFINITY,ranges[key].max=Number.NEGATIVE_INFINITY},SPE.Emitter.prototype._onRemove=function(){this.particlesPerSecond=0,this.attributeOffset=0,this.activationIndex=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.age=0},SPE.Emitter.prototype._decrementParticleCount=function(){--this.activeParticleCount},SPE.Emitter.prototype._incrementParticleCount=function(){++this.activeParticleCount},SPE.Emitter.prototype._checkParticleAges=function(start,end,params,dt){for(var index,maxAge,age,alive,i=end-1;i>=start;--i)0!==(alive=params[index=4*i])&&(age=params[index+1],maxAge=params[index+2],1===this.direction?(age+=dt)>=maxAge&&(age=0,alive=0,this._decrementParticleCount()):(age-=dt)<=0&&(age=maxAge,alive=0,this._decrementParticleCount()),params[index]=alive,params[index+1]=age,this._updateAttributeUpdateRange("params",i))},SPE.Emitter.prototype._activateParticles=function(activationStart,activationEnd,params,dtPerParticle){for(var index,dtValue,direction=this.direction,i=activationStart;i<activationEnd;++i)0!=params[index=4*i]&&1!==this.particleCount||(this._incrementParticleCount(),params[index]=1,this._resetParticle(i),dtValue=dtPerParticle*(i-activationStart),params[index+1]=-1===direction?params[index+2]-dtValue:dtValue,this._updateAttributeUpdateRange("params",i))},SPE.Emitter.prototype.tick=function(dt){if(!this.isStatic){null===this.paramsArray&&(this.paramsArray=this.attributes.params.typedArray.array);var start=this.attributeOffset,end=start+this.particleCount,params=this.paramsArray,ppsDt=this.particlesPerSecond*this.activeMultiplier*dt,activationIndex=this.activationIndex;if(this._resetBufferRanges(),this._checkParticleAges(start,end,params,dt),!1!==this.alive){if(null!==this.duration&&this.age>this.duration)return this.alive=!1,void(this.age=0);var activationStart=1===this.particleCount?activationIndex:0|activationIndex,activationEnd=Math.min(activationStart+ppsDt,this.activationEnd),activationCount=activationEnd-this.activationIndex|0,dtPerParticle=activationCount>0?dt/activationCount:0;this._activateParticles(activationStart,activationEnd,params,dtPerParticle),this.activationIndex+=ppsDt,this.activationIndex>end&&(this.activationIndex=start),this.age+=dt}else this.age=0}},SPE.Emitter.prototype.reset=function(force){if(this.age=0,this.alive=!1,!0===force){for(var index,start=this.attributeOffset,end=start+this.particleCount,array=this.paramsArray,attr=this.attributes.params.bufferAttribute,i=end-1;i>=start;--i)array[index=4*i]=0,array[index+1]=0;attr.updateRange.offset=0,attr.updateRange.count=-1,attr.needsUpdate=!0}return this},SPE.Emitter.prototype.enable=function(){return this.alive=!0,this},SPE.Emitter.prototype.disable=function(){return this.alive=!1,this},SPE.Emitter.prototype.remove=function(){return null!==this.group?this.group.removeEmitter(this):console.error("Emitter does not belong to a group, cannot remove."),this},Animator.prototype.stopAllAnimations=function(){this.clipActions.forEach(ac=>{ac.stop()})},Animator.prototype.playAnimationById=function(id){id>=0&&id<this.clipActions.length?(this.stopAllAnimations(),this.clipActions[id].play(),console.log(`key: ${id} > playing: ${this.modelName} - ${this.clipActions[id]._clip.name}`)):console.warn(`No animation id ${id}!`)},Animator.prototype.updateAnimationFrame=function(){this.mixer&&this.mixer.update(this.engine.core.properties.timing.deltaTime/2e3)},Animator.prototype.update=function(){this.updateAnimationFrame()},Animator.prototype.playAnimationByKeyboard=function(){for(let i=0;i<this.clipActions.length;i++)this.engine.getKeyDown(i+"",200)&&this.playAnimationById(i)},Animator.prototype.getCharacter=function(){return this.character},Animator.prototype.getCharacterName=function(){return this.character.name.replace("_scene_","")},Animator.prototype.getClipActions=function(){return this.clipActions},Animator.prototype.getMixer=function(){return this.mixer},EngineCore.VERSION="EngineCore version 1.0.2",EngineCore.prototype.initPlugins=function(){this.keyboard||(this.keyboard=new Keyboard),this.labelRenderer||(this.labelRenderer=new LabelRenderer(this.graphics)),this.raycaster||(this.raycaster=new RayCast(this.graphics,this.physics)),this.assetLoader||(this.assetLoader=new AssetLoader(this.graphics,this.physics))},EngineCore.prototype.initEvents=function(){window.addEventListener("resize",function(){this.graphics.cameras.forEach(camera=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix()}),this.graphics.renderers.forEach(renderer=>{renderer.setSize(window.innerWidth,window.innerHeight)}),this.labelRenderer&&this.labelRenderer.renderer.setSize(window.innerWidth,window.innerHeight)}.bind(this),!1)},EngineCore.prototype.init=function(options,callback){return new Promise((resolve,reject)=>{var init_options=options||{},g_options=Utils.opts(this.options.graphics,{});this.graphics=new Graphics(g_options);var p_options=Utils.opts(this.options.physics,{});this.physics=new Physics(this.graphics,p_options),this.graphics.init(Utils.opts(init_options,{})).then(params=>{this.physics.init(Utils.opts(init_options.physics,{}));for(var i=0;i<params.glTFs.length;i++)this.physics.createBodiesFromScene(params.glTFs[i].scene);this.initPlugins(),this.initEvents();var ret={glTFs:params.glTFs,envMap:params.envMap,Graphics:this.graphics,Physics:this.physics,Enging:this};resolve(ret),callback&&callback(ret)})})},EngineCore.prototype.getMilliseconds=function(){return performance.now()||Date.now()},EngineCore.prototype.updateGraphics=function(){const t0=this.getMilliseconds();return this.graphics.update(),this.labelRenderer&&this.labelRenderer.labels.length>0&&this.labelRenderer.renderer.render(this.graphics.scene,this.graphics.camera),this.getMilliseconds()-t0},EngineCore.prototype.updatePhysics=function(dt_ms){const t0=this.getMilliseconds();return this.physics.update(dt_ms),this.getMilliseconds(dt_ms)-t0},EngineCore.prototype.update=function(callback){this.reqAnim=void 0,this.reqAnim=requestAnimationFrame(this.update.bind(this)),this.properties.timing.currentTime=this.getMilliseconds(),this.properties.timing.deltaTime=this.properties.timing.currentTime-this.properties.timing.previousTime,this.properties.physics.processingTime=this.updatePhysics(this.properties.timing.deltaTime),this.properties.graphics.processingTime=this.updateGraphics(),this.properties.frameCount++,this.callback&&this.callback(this.properties),this.labelRenderer.update(),this.properties.timing.previousTime=this.properties.timing.currentTime,this.properties.timing.processingTime=this.properties.physics.processingTime+this.properties.graphics.processingTime},EngineCore.prototype.start=function(callback){this.callback=callback,void 0===this.reqAnim&&(this.reqAnim=requestAnimationFrame(this.update.bind(this)))},EngineCore.prototype.stop=function(){void 0!==this.reqAnim&&(cancelAnimationFrame(this.reqAnim),this.reqAnim=void 0)},EngineCore.prototype.loadModel=function(model,callback){return new Promise((resolve,reject)=>{this.graphics.loadGLTF(model).then(gltf=>{this.graphics.scene.add(gltf.scene),this.physics.createBodiesFromScene(gltf.scene),this.graphics.options.useReflection&&this.graphics.applyReflectionMap(gltf.scene),resolve(gltf),callback&&callback(gltf)})})},exports.THREE=THREE,exports.CANNON=CANNON,exports.Animator=Animator,exports.AssetLoader=AssetLoader,exports.EngineCore=EngineCore,exports.Keyboard=Keyboard,exports.RayCast=RayCast,exports.SPE=SPE,exports.Utils=Utils;